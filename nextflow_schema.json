{
    "$schema": "http://json-schema.org/draft-07/schema",
    "$id": "https://raw.githubusercontent.com/tanubrata/nfjabba/master/nextflow_schema.json",
    "title": "tanubrata/nfjabba pipeline parameters",
    "description": "An open-source analysis pipeline to detect germline or somatic variants from whole genome or targeted sequencing",
    "type": "object",
    "definitions": {
        "input_output_options": {
            "title": "Input/output options",
            "type": "object",
            "fa_icon": "fas fa-terminal",
            "description": "Define where the pipeline should find input data and save output data.",
            "help_text": "Specify input samplesheet, step and output folder.",
            "required": [
                "step",
                "outdir"
            ],
            "properties": {
                "input": {
                    "description": "Path to comma-separated file containing information about the samples in the experiment.",
                    "help_text": "A design file with information about the samples in your experiment. Use this parameter to specify the location of the input files. It has to be a comma-separated file with a header row. See [usage docs](https://nf-co.re/sarek/usage#input).\n\nIf no input file is specified, sarek will attempt to locate one in the `{outdir}` directory. If no input should be supplied, i.e. when --step is supplied or --build_from_index, then set --input false",
                    "fa_icon": "fas fa-file-csv",
                    "schema": "assets/schema_input.json",
                    "type": "string",
                    "format": "file-path",
                    "exists": true,
                    "mimetype": "text/csv",
                    "pattern": "^\\S+\\.csv$"
                },
                "input_restart": {
                    "type": "string",
                    "description": "Automatic retrieval for restart",
                    "format": "file-path",
                    "exists": true,
                    "mimetype": "text/csv",
                    "pattern": "^\\S+\\.csv$",
                    "hidden": true,
                    "schema": "assets/schema_input.json"
                },
                "step": {
                    "type": "string",
                    "default": "alignment",
                    "fa_icon": "fas fa-play",
                    "description": "Starting step",
                    "help_text": "The pipeline starts from this step and then runs through the possible subsequent steps.",
                    "enum": [
                        "alignment",
                        "markduplicates",
                        "prepare_recalibration",
                        "recalibrate",
                        "sv_calling",
                        "ascat",
                        "fragcounter",
                        "dryclean",
                        "hetpileups",
                        "jabba",
                        "variant_calling",
                        "annotate"
                    ]
                },
                "outdir": {
                    "type": "string",
                    "format": "directory-path",
                    "description": "The output directory where the results will be saved. You have to use absolute paths to storage on Cloud infrastructure.",
                    "fa_icon": "fas fa-folder-open"
                }
            }
        },
        "main_options": {
            "title": "Main options",
            "type": "object",
            "description": "Most common options used for the pipeline",
            "default": "",
            "properties": {
                "split_fastq": {
                    "type": "integer",
                    "default": 0,
                    "fa_icon": "fas fa-clock",
                    "description": "Specify how many reads each split of a FastQ file contains. Set 0 to turn off splitting at all.",
                    "help_text": "Use the the tool FastP to split FASTQ file by number of reads. This parallelizes across fastq file shards speeding up mapping. "
                },
                "wes": {
                    "type": "boolean",
                    "fa_icon": "fas fa-dna",
                    "description": "Enable when exome or panel data is provided.",
                    "help_text": "With this parameter flags in various tools are set for targeted sequencing data. It is recommended to enable for whole-exome and panel data analysis."
                },
                "intervals": {
                    "type": "string",
                    "fa_icon": "fas fa-file-alt",
                    "help_text": "To speed up preprocessing and variant calling processes, the execution is parallelized across a reference chopped into smaller pieces.\n\nParts of preprocessing and variant calling are done by these intervals, the different resulting files are then merged.\nThis can parallelize processes, and push down wall clock time significantly.\n\nWe are aligning to the whole genome, and then run Base Quality Score Recalibration and Variant Calling on the supplied regions.\n\n**Whole Genome Sequencing:**\n\nThe (provided) intervals are chromosomes cut at their centromeres (so each chromosome arm processed separately) also additional unassigned contigs.\n\nWe are ignoring the `hs37d5` contig that contains concatenated decoy sequences.\n\nThe calling intervals can be defined using a .list or a BED file.\nA .list file contains one interval per line in the format `chromosome:start-end` (1-based coordinates).\nA BED file must be a tab-separated text file with one interval per line.\nThere must be at least three columns: chromosome, start, and end (0-based coordinates).\nAdditionally, the score column of the BED file can be used to provide an estimate of how many seconds it will take to call variants on that interval.\nThe fourth column remains unused.\n\n```\n|chr1|10000|207666|NA|47.3|\n```\nThis indicates that variant calling on the interval chr1:10001-207666 takes approximately 47.3 seconds.\n\nThe runtime estimate is used in two different ways.\nFirst, when there are multiple consecutive intervals in the file that take little time to compute, they are processed as a single job, thus reducing the number of processes that needs to be spawned.\nSecond, the jobs with largest processing time are started first, which reduces wall-clock time.\nIf no runtime is given, a time of 200000 nucleotides per second is assumed. See `--nucleotides_per_second` on how to customize this.\nActual figures vary from 2 nucleotides/second to 30000 nucleotides/second.\nIf you prefer, you can specify the full path to your reference genome when you run the pipeline:\n\n> **NB** If none provided, will be generated automatically from the FASTA reference\n> **NB** Use --no_intervals to disable automatic generation.\n\n**Targeted Sequencing:**\n\nThe recommended flow for targeted sequencing data is to use the workflow as it is, but also provide a `BED` file containing targets for all steps using the `--intervals` option. In addition, the parameter `--wes` should be set.\nIt is advised to pad the variant calling regions (exons or target) to some extent before submitting to the workflow.\n\nThe procedure is similar to whole genome sequencing, except that only BED file are accepted. See above for formatting description.\nAdding every exon as an interval in case of `WES` can generate >200K processes or jobs, much more forks, and similar number of directories in the Nextflow work directory. These are appropriately  grouped together to reduce number of processes run in parallel (see above and `--nucleotides_per_second` for details). \nFurthermore, primers and/or baits are not 100% specific, (certainly not for MHC and KIR, etc.), quite likely there going to be reads mapping to multiple locations.\nIf you are certain that the target is unique for your genome (all the reads will certainly map to only one location), and aligning to the whole genome is an overkill, it is actually better to change the reference itself.",
                    "description": "Path to target bed file in case of whole exome or targeted sequencing or intervals file."
                },
                "nucleotides_per_second": {
                    "type": "number",
                    "fa_icon": "fas fa-clock",
                    "description": "Estimate interval size.",
                    "help_text": "Intervals are parts of the chopped up genome used to speed up preprocessing and variant calling. See `--intervals` for more info. \n\nChanging this parameter, changes the number of intervals that are grouped and processed together. Bed files from target sequencing can contain thousands or small intervals. Spinning up a new process for each can be quite resource intensive. Instead it can be desired to process small intervals together on larger nodes. \nIn order to make use of this parameter, no runtime estimate can be present in the bed file (column 5). ",
                    "default": 200000
                },
                "no_intervals": {
                    "type": "boolean",
                    "fa_icon": "fas fa-ban",
                    "description": "Disable usage of intervals.",
                    "help_text": "Intervals are parts of the chopped up genome used to speed up preprocessing and variant calling. See `--intervals` for more info. \n\nIf  `--no_intervals` is set no intervals will be taken into account for speed up or data processing."
                },
                "skip_tools": {
                    "type": "string",
                    "fa_icon": "fas fa-forward",
                    "description": "Disable specified tools.",
                    "help_text": "Multiple tools can be specified, separated by commas.\n\n> **NB** `--skip_tools baserecalibrator_report` is actually just not saving the reports.\n> **NB** `--skip_tools markduplicates_report` does not skip `MarkDuplicates` but prevent the collection of duplicate metrics that slows down performance.",
                    "pattern": "^((baserecalibrator|baserecalibrator_report|bcftools|documentation|fastqc|haplotypecaller_filter|haplotyper_filter|markduplicates|markduplicates_report|mosdepth|multiqc|samtools|vcftools|versions)?,?)*(?<!,)$"
                }
            },
            "fa_icon": "fas fa-user-cog"
        },
        "fastq_preprocessing": {
            "title": "FASTQ Preprocessing",
            "type": "object",
            "description": "Trim fastq file or handle UMIs",
            "default": "",
            "fa_icon": "fas fa-cut",
            "properties": {
                "trim_fastq": {
                    "type": "boolean",
                    "fa_icon": "fas fa-cut",
                    "description": "Run FastP for read trimming",
                    "help_text": "Use this to perform adapter trimming. Adapter are detected automatically by using the FastP flag `--detect_adapter_for_pe`. For more info see [FastP](https://github.com/OpenGene/fastp)."
                },
                "clip_r1": {
                    "type": "integer",
                    "default": 0,
                    "fa_icon": "fas fa-cut",
                    "description": "Remove bp from the 5' end of read 1",
                    "help_text": "This may be useful if the qualities were very poor, or if there is some sort of unwanted bias at the 5' end. Corresponds to the FastP flag `--trim_front1`.",
                    "hidden": true
                },
                "clip_r2": {
                    "type": "integer",
                    "default": 0,
                    "description": "Remove bp from the 5' end of read 2",
                    "help_text": "This may be useful if the qualities were very poor, or if there is some sort of unwanted bias at the 5' end. Corresponds to the FastP flag `--trim_front2`.",
                    "fa_icon": "fas fa-cut",
                    "hidden": true
                },
                "three_prime_clip_r1": {
                    "type": "integer",
                    "default": 0,
                    "fa_icon": "fas fa-cut",
                    "description": "Remove bp from the 3' end of read 1",
                    "help_text": "This may remove some unwanted bias from the 3'.  Corresponds to the FastP flag `--three_prime_clip_r1`.",
                    "hidden": true
                },
                "three_prime_clip_r2": {
                    "type": "integer",
                    "default": 0,
                    "fa_icon": "fas fa-cut",
                    "description": "Remove bp from the 3' end of read 2",
                    "help_text": "This may remove some unwanted bias from the 3' end. Corresponds to the FastP flag `--three_prime_clip_r2`.",
                    "hidden": true
                },
                "trim_nextseq": {
                    "type": "integer",
                    "default": 0,
                    "fa_icon": "fas fa-cut",
                    "description": "Removing poly-G tails.",
                    "help_text": "DetectS polyG in read tails and trim them. Corresponds to the FastP flag `--trim_poly_g`.",
                    "hidden": true
                },
                "save_trimmed": {
                    "type": "boolean",
                    "fa_icon": "fas fa-save",
                    "description": "Save trimmed FastQ file intermediates.",
                    "hidden": true
                },
                "save_split_fastqs": {
                    "type": "boolean",
                    "fa_icon": "fas fa-vial",
                    "description": "If set, publishes split FASTQ files. Intended for testing purposes.",
                    "hidden": true
                }
            }
        },
        "preprocessing": {
            "title": "Preprocessing",
            "type": "object",
            "description": "Configure preprocessing tools",
            "default": "",
            "fa_icon": "fas fa-toolbox",
            "properties": {
                "aligner": {
                    "type": "string",
                    "default": "fq2bam",
                    "fa_icon": "fas fa-puzzle-piece",
                    "enum": [
                        "fq2bam",
                        "bwa-mem",
                        "bwa-mem2"
                    ],
                    "description": "Specify aligner to be used to map reads to reference genome.",
                    "help_text": "Will build missing indices automatically if not provided. Set `--bwa false` if indices should be (re-)built.\nIf DragMap is selected as aligner, it is recommended to skip baserecalibration with `--skip_tools baserecalibrator`. For more info see [here](https://gatk.broadinstitute.org/hc/en-us/articles/4407897446939--How-to-Run-germline-single-sample-short-variant-discovery-in-DRAGEN-mode)."
                },
                "fq2bam_low_memory": {
                    "type": "boolean",
                    "default": false,
                    "fa_icon": "fas fa-memory",
                    "description": "Run FastQ to BAM conversion in low memory mode.",
                    "help_text": "If set, the FastQ to BAM conversion is run in low memory mode. This is useful for large FastQ files."
                },
                "fq2bam_markduplicates": {
                    "type": "boolean",
                    "default": true,
                    "fa_icon": "fas fa-dna",
                    "description": "Run MarkDuplicates on FastQ to BAM conversion.",
                    "help_text": "If set, duplicates are marked in the FastQ to BAM conversion step. This is useful for UMI data."
                },
                "optical_duplicate_pixel_distance": {
                    "type": "integer",
                    "default": 2500,
                    "fa_icon": "fas fa-wrench",
                    "description": "Maximum offset between optical duplicates.",
                    "help_text": "The maximum offset between optical duplicates in pixels. Corresponds to the Picard flag `--OPTICAL_DUPLICATE_PIXEL_DISTANCE`."
                },
                "save_mapped": {
                    "type": "boolean",
                    "fa_icon": "fas fa-download",
                    "description": "Save mapped files.",
                    "help_text": "If the parameter `--split-fastq` is used, the sharded bam files are merged and converted to CRAM before saving them."
                },
                "save_output_as_bam": {
                    "type": "boolean",
                    "description": "Saves output from mapping (if `--save_mapped`), Markduplicates & Baserecalibration as BAM file instead of CRAM",
                    "fa_icon": "fas fa-download"
                }
            }
        },
        "sv_calling": {
            "title": "Structural Variant Calling",
            "type": "object",
            "description": "Configure SV calling tools",
            "default": "",
            "fa_icon": "fas fa-toolbox",
            "properties": {
                "error_rate": {
                    "type": "number",
                    "default": 0.01,
                    "fa_icon": "fas fa-wrench",
                    "description": "Overwrite Svaba error rate",
                    "hidden": true,
                    "help_text": "Set an error rate between 0 and 1 for Svaba, by default it is 0.01"
                },
                "indel_mask": {
                    "type": "string",
                    "fa_icon": "fas fa-forward",
                    "description": "Provide Indel Mask for SVABA based on hg19/hg38. Should be .bed file",
                    "hidden": true,
                    "help_text": "Provide the indel mask path that you want to use for SVABA"
                },
                "germ_sv_db": {
                    "type": "string",
                    "fa_icon": "fas fa-forward",
                    "description": "Provide Germline SV file for reference for SVABA based on hg19/hg38. Should be .bed file",
                    "hidden": true,
                    "help_text": "Provide the Germline SV file path that you want to use for SVABA"
                },
                "simple_seq_db": {
                    "type": "string",
                    "fa_icon": "fas fa-forward",
                    "description": "Provide file containing sites of simple DNA for SVABA based on hg19/hg38. Should be .bed file",
                    "hidden": true,
                    "help_text": "Provide the simple DNA file path that you want to use for SVABA"
                },
                "blacklist_gridss": {
                    "type": "string",
                    "fa_icon": "fas fa-forward",
                    "description": "Provide file Blacklist for GRIDSS based on hg19/hg38. Should be .bed file",
                    "hidden": true,
                    "help_text": "Provide the Blacklist file path that you want to use for GRIDSS"
                },
                "pon_gridss": {
                    "type": "string",
                    "fa_icon": "fas fa-forward",
                    "description": "Provide the PON directory for GRIDSS Somatic filter",
                    "hidden": true,
                    "help_text": "Provide the PON directory for GRIDSS. Must contain both .bed and .bedpe file."
                }
            }
        },
        "hetpileups": {
            "title": "HetPileUps",
            "type": "object",
            "description": "",
            "default": "",
            "properties": {
                "filter_hets": {
                    "type": "string",
                    "default": "TRUE",
                    "description": "Whether to perform filtering on low quality hets",
                    "help_text": "By default, it is TRUE so that it filters low quality calls",
                    "fa_icon": "fas fa-filter"
                },
                "max_depth": {
                    "type": "integer",
                    "default": 1000,
                    "description": "Bin size to do hetpileups",
                    "help_text": "By default it is set to 1000 to correspond with CBS/dryclean bin size",
                    "fa_icon": "fas fa-cut"
                },
                "hapmap_sites": {
                    "type": "string",
                    "default": "None",
                    "description": "Hapmap reference file based on genome",
                    "help_text": "Provide the population hapmap reference file based on genome version",
                    "fa_icon": "fas fa-file"
                }
            },
            "fa_icon": "fas fa-suitcase"
        },
        "fragcounter": {
            "title": "FragCounter",
            "type": "object",
            "description": "Configure coverage tools fragCounter",
            "default": "",
            "fa_icon": "fas fa-toolbox",
            "properties": {
                "midpoint_frag": {
                    "type": "string",
                    "fa_icon": "fas fa-forward",
                    "description": "Option for counting method in fragCounter",
                    "help_text": "If TRUE only count midpoint if FALSE then count bin footprint of every fragment interval"
                },
                "paired_frag": {
                    "type": "string",
                    "fa_icon": "fas fa-forward",
                    "description": "Option to mention whether the dataset is paired or single ended for fragCounter",
                    "help_text": "If TRUE, will consider the dataset is paired ended, else single ended"
                },
                "exome_frag": {
                    "type": "string",
                    "fa_icon": "fas fa-forward",
                    "description": "Bin counting method for fragCounter on whether it is exome or genome",
                    "help_text": "If TRUE, will consider the input the data as exome, else if FALSE will consider it genome",
                    "hidden": true
                },
                "windowsize_frag": {
                    "type": "number",
                    "default": 200,
                    "fa_icon": "fas fa-wrench",
                    "description": "Default bin size for fragCounter",
                    "help_text": "By default the bin size is 200, adjust as necessary."
                },
                "minmapq_frag": {
                    "type": "number",
                    "default": 1,
                    "fa_icon": "fas fa-wrench",
                    "description": "Minimal Mapping Quality for fragCounter",
                    "help_text": "By default the minimum mapping quality is 200, adjust as necessary."
                },
                "gcmapdir_frag": {
                    "type": "string",
                    "fa_icon": "fas fa-forward",
                    "description": "GC and Mappabilty directory for fragCounter",
                    "help_text": "Provide the directory containing .rds file for gc and mappability bias based on genome version"
                }
            }
        },
        "dryclean": {
            "title": "Dryclean",
            "type": "object",
            "description": "Configure genome wide cleaning using Dryclean",
            "default": "",
            "fa_icon": "fas fa-toolbox",
            "properties": {
                "pon_dryclean": {
                    "type": "string",
                    "fa_icon": "fas fa-forward",
                    "description": "Dryclean PON",
                    "help_text": "Provide the PON .rds file based on genome version"
                },
                "center_dryclean": {
                    "type": "string",
                    "fa_icon": "fas fa-forward",
                    "description": "Option to specify whether the samples are centered",
                    "help_text": "are the samples centered",
                    "default": "TRUE"
                },
                "cbs_dryclean": {
                    "type": "string",
                    "fa_icon": "fas fa-forward",
                    "description": "Option to specify whether to perform CBS",
                    "hidden": true,
                    "help_text": "if TRUE, perform cbs on the drycleaned coverage",
                    "default": "FALSE"
                },
                "cnsignif_dryclean": {
                    "type": "number",
                    "default": 0.00001,
                    "fa_icon": "fas fa-wrench",
                    "description": "Significance level for CBS",
                    "help_text": "the significance levels for the test to accept change-points in cbs"
                },
                "wholeGenome_dryclean": {
                    "type": "string",
                    "fa_icon": "fas fa-forward",
                    "description": "Option to specify whether perform dryclean on whole genome",
                    "hidden": true,
                    "help_text": "if TRUE, it will process all chromosomes and parallelize it",
                    "default": "TRUE"
                },
                "blacklist_dryclean": {
                    "type": "string",
                    "fa_icon": "fas fa-forward",
                    "description": "Option to specify whether there are blacklisted makers",
                    "hidden": true,
                    "help_text": "if TRUE, will assume there is blacklisted makers",
                    "default": "FALSE"
                },
                "blacklist_path_dryclean": {
                    "type": "string",
                    "fa_icon": "fas fa-forward",
                    "description": "Dryclean blacklist path",
                    "help_text": "Provide the path to dryclean blacklist, default is null",
                    "default": "NA"
                },
                "germline_filter_dryclean": {
                    "type": "string",
                    "fa_icon": "fas fa-forward",
                    "description": "If PON based germline filter is to be used for removing some common germline events",
                    "hidden": true,
                    "help_text": "If set to TRUE, give path to germline annotated file",
                    "default": "FALSE"
                },
                "germline_file_dryclean": {
                    "type": "string",
                    "fa_icon": "fas fa-forward",
                    "description": "Path to file annotated with germline calls, if germline.filter == TRUE",
                    "help_text": "Path to file annotated with germline calls, if germline.filter == TRUE",
                    "default": "NA"
                },
                "field_dryclean": {
                    "type": "string",
                    "fa_icon": "fas fa-forward",
                    "description": "Field name in GRanges metadata to use for drycleaning",
                    "help_text": "Specify Field name in GRanges metadata to use for drycleaning",
                    "default": "reads"
                },
                "build_dryclean": {
                    "type": "string",
                    "default": "hg19",
                    "description": "Mention whether it is hg19 or hg38",
                    "fa_icon": "fas fa-font"
                }
            }
        },
        "cbs": {
            "title": "CBS",
            "type": "object",
            "description": "Input params to run CBS",
            "default": "",
            "properties": {
                "cnsignif_cbs": {
                    "type": "number",
                    "default": 0.01,
                    "description": "Significance level to consider for CBS",
                    "help_text": "Default is set to 10% or 0.01",
                    "fa_icon": "fas fa-filter"
                },
                "field_cbs": {
                    "type": "string",
                    "default": "foreground",
                    "description": "Field to apply CBS on",
                    "help_text": "Defualt field is \"foreground\" if it comes from dryclean. Else, select the column to apply CBS on",
                    "fa_icon": "fas fa-font"
                },
                "name_cbs": {
                    "type": "string",
                    "default": "tumor",
                    "description": "Name of CBS run",
                    "fa_icon": "fas fa-font",
                    "hidden": true
                }
            },
            "fa_icon": "fas fa-suitcase"
        },
        "ascat_seg": {
            "title": "ASCAT SEG",
            "type": "object",
            "description": "Run ASCAT using Hetpileups and Segments files as inputs",
            "default": "",
            "fa_icon": "fas fa-toolbox",
            "properties": {
                "field_ascat": {
                    "type": "string",
                    "fa_icon": "fas fa-forward",
                    "description": "field to use for ascat from coverage, default is ratio",
                    "help_text": "Provide the field from cbs cov",
                    "default": "foreground"
                },
                "hets_thresh_ascat": {
                    "type": "number",
                    "default": 0.2,
                    "fa_icon": "fas fa-wrench",
                    "description": "Significance level for CBS",
                    "help_text": "the significance levels for the test to accept change-points in cbs"
                },
                "penalty_ascat": {
                    "type": "number",
                    "default": 70,
                    "fa_icon": "fas fa-wrench",
                    "description": "Significance level for CBS",
                    "help_text": "the significance levels for the test to accept change-points in cbs"
                },
                "gc_correct_ascat": {
                    "type": "string",
                    "fa_icon": "fas fa-forward",
                    "description": "whether to perform gc correction on coverage",
                    "help_text": "By default it is true and should perform gc corrections",
                    "default": "TRUE"
                },
                "rebin_width_ascat": {
                    "type": "number",
                    "default": 50000,
                    "fa_icon": "fas fa-wrench",
                    "description": "Width of bins to do",
                    "help_text": "The bin size, default is 5e4"
                },
                "from_maf_ascat": {
                    "type": "string",
                    "fa_icon": "fas fa-forward",
                    "description": "whether to start from MAF stage",
                    "help_text": "By default it is FALSE and should not start from MAF stage",
                    "default": "FALSE",
                    "hidden": true
                }
            }
        },
        "jabba": {
            "title": "JaBbA",
            "type": "object",
            "description": "Input params to run JaBbA",
            "default": "",
            "properties": {
                "blacklist_junctions_jabba": {
                    "type": "string",
                    "description": "rearrangement junctions to be excluded from consideration",
                    "fa_icon": "fas fa-file"
                },
                "geno_jabba": {
                    "type": "string",
                    "default": "FALSE",
                    "description": "whether the junction has genotype information",
                    "hidden": true
                },
                "indel_jabba": {
                    "type": "string",
                    "default": "exclude",
                    "description": "character of the decision to 'exclude' or 'include' small(< min.nbins * coverage bin width) isolated INDEL-like events into the model."
                },
                "tfield_jabba": {
                    "type": "string",
                    "default": "tier",
                    "description": "tier confidence meta data field in ra. tiers are 1 = must use, 2 = may use, 3 = use only in iteration>1 if near loose end. Default 'tier'.",
                    "fa_icon": "fas fa-font"
                },
                "iter_jabba": {
                    "type": "integer",
                    "default": 2,
                    "description": "the number of extra re-iterations allowed, to rescue lower confidence junctions that are near loose end. Default 0. This requires junctions to be tiered via a metadata field tfield.",
                    "hidden": true,
                    "fa_icon": "fas fa-wrench"
                },
                "rescue_window_jabba": {
                    "type": "integer",
                    "default": 10000,
                    "description": "window size in bp within which to look for lower confidence junctions. Default 1000.",
                    "hidden": true,
                    "fa_icon": "fas fa-wrench"
                },
                "rescue_all_jabba": {
                    "type": "string",
                    "default": "TRUE",
                    "hidden": true,
                    "fa_icon": "fas fa-forward",
                    "description": "whether to rescue all lower confidence junctions within the window, or just the best one."
                },
                "nudgebalanced_jabba": {
                    "type": "string",
                    "default": "TRUE",
                    "description": "whether to attempt to add a small incentive for chains of quasi-reciprocal junctions.",
                    "hidden": true,
                    "fa_icon": "fas fa-forward"
                },
                "strict_jabba": {
                    "type": "string",
                    "default": "FALSE",
                    "description": "if used will only include junctions that exactly overlap segs",
                    "hidden": true,
                    "fa_icon": "fas fa-forward"
                },
                "edgenudge_jabba": {
                    "type": "number",
                    "default": 0.1,
                    "description": "numeric hyper-parameter of how much to nudge or reward aberrant junction incorporation. Default 0.1 (should be several orders of magnitude lower than average 1/sd on individual segments), a nonzero value encourages incorporation of perfectly balanced rearrangements which would be equivalently optimal with 0 copies or more copies.",
                    "hidden": true,
                    "fa_icon": "fas fa-wrench"
                },
                "allin_jabba": {
                    "type": "string",
                    "default": "FALSE",
                    "description": "if TRUE will put all tiers in the first round of iteration",
                    "hidden": true,
                    "fa_icon": "fas fa-wrench"
                },
                "field_jabba": {
                    "type": "string",
                    "default": "foreground",
                    "description": "name of the metadata column of coverage that contains the data. Default 'ratio' (coverage ratio between tumor and normal). If using dryclean, it is 'foreground'.",
                    "fa_icon": "fas fa-font"
                },
                "maxna_jabba": {
                    "type": "number",
                    "default": 0.9,
                    "description": "Any node with more NA than this fraction will be ignored",
                    "fa_icon": "fas fa-wrench"
                },
                "ploidy_jabba": {
                    "type": "string",
                    "default": "NA",
                    "description": "Ploidy guess, can be a length 2 range",
                    "fa_icon": "fas fa-wrench"
                },
                "purity_jabba": {
                    "type": "string",
                    "default": "NA",
                    "description": "Purity guess, can be a length 2 range",
                    "fa_icon": "fas fa-wrench"
                },
                "pp_method_jabba": {
                    "type": "string",
                    "default": "ppgrid",
                    "description": "select from 'ppgrid', 'ppurple', and 'sequenza' to infer purity and ploidy if not both given. Default, 'sequenza'.",
                    "fa_icon": "fas fa-calculator"
                },
                "cnsignif_jabba": {
                    "type": "number",
                    "default": 0.00001,
                    "description": "alpha value for CBS",
                    "fa_icon": "fas fa-wrench"
                },
                "slack_jabba": {
                    "type": "integer",
                    "default": 100,
                    "description": "Slack penalty to apply per loose end",
                    "fa_icon": "fas fa-wrench"
                },
                "linear_jabba": {
                    "type": "string",
                    "default": "TRUE",
                    "description": "if TRUE will use L1 loose end penalty",
                    "hidden": true,
                    "fa_icon": "fas fa-forward"
                },
                "tilim_jabba": {
                    "type": "integer",
                    "default": 7200,
                    "description": "Time limit for JaBbA MIP",
                    "fa_icon": "fas fa-wrench"
                },
                "epgap_jabba": {
                    "type": "number",
                    "description": "threshold for calling convergence",
                    "fa_icon": "fas fa-wrench"
                },
                "fix_thres_jabba": {
                    "type": "integer",
                    "default": -1,
                    "fa_icon": "fas fa-wrench",
                    "description": "threshold for calling convergence"
                },
                "lp_jabba": {
                    "type": "string",
                    "default": "TRUE",
                    "description": "Run as LP",
                    "hidden": true,
                    "fa_icon": "fas fa-forward"
                },
                "ism_jabba": {
                    "type": "string",
                    "default": "TRUE",
                    "description": "Include infinite sites constraints",
                    "hidden": true,
                    "fa_icon": "fas fa-forward"
                },
                "filter_loose_jabba": {
                    "type": "string",
                    "default": "FALSE",
                    "description": "whether to filter loose ends",
                    "fa_icon": "fas fa-forward"
                },
                "gurobi_jabba": {
                    "type": "string",
                    "default": "FALSE",
                    "description": "Whether to run with GUROBI instead of CPLEX",
                    "hidden": true,
                    "fa_icon": "fas fa-tools"
                },
                "nonintegral_jabba": {
                    "type": "string",
                    "default": "FALSE",
                    "fa_icon": "fas fa-forward",
                    "description": "whether to allow non-integral solutions"
                },
                "verbose_jabba": {
                    "type": "string",
                    "default": "TRUE",
                    "description": "verbose output",
                    "hidden": true,
                    "fa_icon": "fas fa-forward"
                },
                "help_jabba": {
                    "type": "string",
                    "default": "FALSE",
                    "description": "Show this help message and exitsage: jba JUNCTIONS COVERAGE [options]",
                    "hidden": true,
                    "fa_icon": "fas fa-file"
                },
                "blacklist_coverage_jabba": {
                    "type": "string",
                    "default": "None",
                    "description": "File path to remove blacklisted positions from coverage",
                    "fa_icon": "fas fa-file"
                }
            },
            "fa_icon": "fas fa-suitcase"
        },
        "variant_calling": {
            "title": "Variant Calling",
            "type": "object",
            "description": "Configure variant calling tools",
            "default": "",
            "fa_icon": "fas fa-toolbox",
            "properties": {
                "concatenate_vcfs": {
                    "type": "boolean",
                    "fa_icon": "fas fa-merge",
                    "description": "Option for concatenating germline vcf-files.",
                    "help_text": "Concatenating the germline vcf-files from each applied variant-caller into one vcf-file using bfctools concat."
                },
                "only_paired_variant_calling": {
                    "type": "boolean",
                    "fa_icon": "fas fa-forward",
                    "description": "If true, skips germline variant calling for matched normal to tumor sample. Normal samples without matched tumor will still be processed through germline variant calling tools.",
                    "help_text": "This can speed up computation for somatic variant calling with matched normal samples. If false, all normal samples are processed as well through the germline variantcalling tools. If true, only somatic variant calling is done."
                },
                "joint_germline": {
                    "type": "boolean",
                    "fa_icon": "fas fa-toolbox",
                    "description": "Turn on the joint germline variant calling for GATK haplotypecaller",
                    "help_text": "Uses all normal germline samples (as designated by `status` in the input csv) in the joint germline variant calling process."
                },
                "joint_mutect2": {
                    "type": "boolean",
                    "fa_icon": "fas fa-angle-double-right",
                    "description": "Runs Mutect2 in joint (multi-sample) mode for better concordance among variant calls of tumor samples from the same patient. Mutect2 outputs will be stored in a subfolder named with patient ID under `variant_calling/mutect2/` folder. Only a single normal sample per patient is allowed. Tumor-only mode is also supported."
                },
                "cf_chrom_len": {
                    "type": "string",
                    "fa_icon": "fas fa-ruler-horizontal",
                    "description": "Specify a custom chromosome length file.",
                    "help_text": "Control-FREEC requires a file containing all chromosome lenghts. By default the fasta.fai is used. If the fasta.fai file contains chromosomes not present in the intervals, it fails (see: https://github.com/BoevaLab/FREEC/issues/106).\n\nIn this case, a custom chromosome length can be specified. It must be of the same format as the fai, but only contain the relevant chromosomes.\n\n\n\n",
                    "hidden": true
                },
                "cf_coeff": {
                    "type": "number",
                    "default": 0.05,
                    "fa_icon": "fas fa-wrench",
                    "description": "Overwrite Control-FREEC coefficientOfVariation",
                    "hidden": true,
                    "help_text": "Details, see [ControlFREEC manual](http://boevalab.inf.ethz.ch/FREEC/tutorial.html)."
                },
                "cf_contamination_adjustment": {
                    "type": "boolean",
                    "fa_icon": "fas fa-broom",
                    "description": "Overwrite Control-FREEC contaminationAdjustement",
                    "hidden": true,
                    "help_text": "Details, see [ControlFREEC manual](http://boevalab.inf.ethz.ch/FREEC/tutorial.html)."
                },
                "cf_contamination": {
                    "type": "number",
                    "default": 0,
                    "fa_icon": "fas fa-broom",
                    "description": "Design known contamination value for Control-FREEC",
                    "hidden": true,
                    "help_text": "Details, see [ControlFREEC manual](http://boevalab.inf.ethz.ch/FREEC/tutorial.html)."
                },
                "cf_minqual": {
                    "type": "number",
                    "default": 0,
                    "fa_icon": "fas fa-greater-than",
                    "hidden": true,
                    "description": "Minimal sequencing quality for a position to be considered in BAF analysis.",
                    "help_text": "Details, see [ControlFREEC manual](http://boevalab.inf.ethz.ch/FREEC/tutorial.html)."
                },
                "cf_mincov": {
                    "type": "number",
                    "default": 0,
                    "fa_icon": "fas fa-align-center",
                    "hidden": true,
                    "description": "Minimal read coverage for a position to be considered in BAF analysis.",
                    "help_text": "Details, see [ControlFREEC manual](http://boevalab.inf.ethz.ch/FREEC/tutorial.html)."
                },
                "cf_ploidy": {
                    "type": "string",
                    "default": "2",
                    "fa_icon": "fas fa-bacon",
                    "help_text": "In case of doubt, you can set different values and Control-FREEC will select the one that explains most observed CNAs Example: ploidy=2 , ploidy=2,3,4. For more details, see the [manual](http://boevalab.inf.ethz.ch/FREEC/tutorial.html).",
                    "description": "Genome ploidy used by ControlFREEC",
                    "hidden": true
                },
                "cf_window": {
                    "type": "number",
                    "fa_icon": "fas fa-window-maximize",
                    "description": "Overwrite Control-FREEC window size.",
                    "help_text": "Details, see [ControlFREEC manual](http://boevalab.inf.ethz.ch/FREEC/tutorial.html).",
                    "hidden": true
                },
                "cnvkit_reference": {
                    "type": "string",
                    "fa_icon": "fas fa-file",
                    "help_text": "https://cnvkit.readthedocs.io/en/stable/pipeline.html?highlight=reference.cnn#batch",
                    "description": "Copy-number reference for CNVkit",
                    "hidden": true
                },
                "ignore_soft_clipped_bases": {
                    "type": "boolean",
                    "fa_icon": "fas fa-ban",
                    "description": "Do not analyze soft clipped bases in the reads for GATK Mutect2.",
                    "help_text": "use the `--dont-use-soft-clipped-bases` params with GATK Mutect2.",
                    "hidden": true
                },
                "sentieon_haplotyper_emit_mode": {
                    "type": "string",
                    "default": "variant",
                    "fa_icon": "fas fa-toolbox",
                    "description": "Option for selecting output and emit-mode of Sentieon's Haplotyper.",
                    "help_text": "The option `--sentieon_haplotyper_emit_mode` can be set to the same string values as the Haplotyper's `--emit_mode`. To output both a vcf and a gvcf, specify both a vcf-option (currently, `all`, `confident` and `variant`) and `gvcf`. For example, to obtain a vcf and gvcf one could set `--sentieon_haplotyper_emit_mode` to `variant, gvcf`.",
                    "pattern": "^(all|confident|gvcf|variant|gvcf,all|gvcf,confident|gvcf,variant|all,gvcf|confident,gvcf|variant,gvcf)(?<!,)$"
                },
                "ascat_min_base_qual": {
                    "type": "number",
                    "default": 20,
                    "fa_icon": "fas fa-greater-than",
                    "description": "Overwrite Ascat min base quality required for a read to be counted.",
                    "hidden": true,
                    "help_text": "For more details see [here](https://raw.githubusercontent.com/VanLoo-lab/ascat/master/man/ASCAT-manual.pdf)"
                },
                "ascat_min_counts": {
                    "type": "number",
                    "default": 10,
                    "fa_icon": "fas fa-align-center",
                    "description": "Overwrite Ascat minimum depth required in the normal for a SNP to be considered.",
                    "hidden": true,
                    "help_text": "For more details, see [here](https://raw.githubusercontent.com/VanLoo-lab/ascat/master/man/ASCAT-manual.pdf)."
                },
                "ascat_min_map_qual": {
                    "type": "number",
                    "default": 35,
                    "fa_icon": "fas fa-balance-scale-left",
                    "description": "Overwrite Ascat min mapping quality required for a read to be counted.",
                    "hidden": true,
                    "help_text": "For more details, see [here](https://raw.githubusercontent.com/VanLoo-lab/ascat/master/man/ASCAT-manual.pdf)."
                },
                "ascat_ploidy": {
                    "type": "number",
                    "fa_icon": "fas fa-bacon",
                    "help_text": "ASCAT: optional argument to override ASCAT optimization and supply psi parameter (expert parameter, do not adapt unless you know what you are doing). See [here](https://raw.githubusercontent.com/VanLoo-lab/ascat/master/man/ASCAT-manual.pdf)",
                    "hidden": true,
                    "description": "Overwrite ASCAT ploidy."
                },
                "ascat_purity": {
                    "type": "number",
                    "fa_icon": "fas fa-broom",
                    "description": "Overwrite ASCAT purity.",
                    "help_text": "Overwrites ASCAT's `rho_manual` parameter. Expert use only, see [here](https://raw.githubusercontent.com/VanLoo-lab/ascat/master/man/ASCAT-manual.pdf) for details.\nRequires that `--ascat_ploidy` is set.",
                    "hidden": true
                }
            }
        },
        "annotation": {
            "title": "Annotation",
            "type": "object",
            "description": "",
            "default": "",
            "fa_icon": "fas fa-toolbox",
            "properties": {
                "vep_cache": {
                    "type": "string",
                    "fa_icon": "fas fa-file",
                    "default": "s3://annotation-cache/vep_cache/",
                    "description": "Path to VEP cache.",
                    "help_text": "Path to VEP cache which should contain the relevant species, genome and build directories at the path ${vep_species}/${vep_genome}_${vep_cache_version}",
                    "hidden": true
                },
                "snpeff_cache": {
                    "type": "string",
                    "fa_icon": "fas fa-file",
                    "default": "s3://annotation-cache/snpeff_cache/",
                    "description": "Path to snpEff cache.",
                    "help_text": "Path to snpEff cache which should contain the relevant genome and build directory in the path ${snpeff_species}.${snpeff_version}",
                    "hidden": true
                },
                "vep_include_fasta": {
                    "type": "boolean",
                    "fa_icon": "fas fa-file",
                    "description": "Allow usage of fasta file for annotation with VEP",
                    "hidden": true,
                    "help_text": "By pointing VEP to a FASTA file, it is possible to retrieve reference sequence locally. This enables VEP to retrieve HGVS notations (--hgvs), check the reference sequence given in input data, and construct transcript models from a GFF or GTF file without accessing a database.\n\nFor details, see [here](https://www.ensembl.org/info/docs/tools/vep/script/vep_cache.html#fasta)."
                },
                "vep_dbnsfp": {
                    "type": "boolean",
                    "fa_icon": "fas fa-database",
                    "description": "Enable the use of the VEP dbNSFP plugin.",
                    "hidden": true,
                    "help_text": "For details, see [here](https://www.ensembl.org/info/docs/tools/vep/script/vep_plugins.html#dbnsfp)."
                },
                "dbnsfp": {
                    "type": "string",
                    "fa_icon": "fas fa-file",
                    "description": "Path to dbNSFP processed file.",
                    "help_text": "To be used with `--vep_dbnsfp`.\ndbNSFP files and more information are available at https://www.ensembl.org/info/docs/tools/vep/script/vep_plugins.html#dbnsfp and https://sites.google.com/site/jpopgen/dbNSFP/",
                    "hidden": true
                },
                "dbnsfp_tbi": {
                    "type": "string",
                    "fa_icon": "fas fa-file",
                    "description": "Path to dbNSFP tabix indexed file.",
                    "help_text": "To be used with `--vep_dbnsfp`.",
                    "hidden": true
                },
                "dbnsfp_consequence": {
                    "type": "string",
                    "fa_icon": "fas fa-arrow-alt-circle-right",
                    "description": "Consequence to annotate with",
                    "help_text": "To be used with `--vep_dbnsfp`.\nThis params is used to filter/limit outputs to a specific effect of the variant.\nThe set of consequence terms is defined by the Sequence Ontology and an overview of those used in VEP can be found here: https://www.ensembl.org/info/genome/variation/prediction/predicted_data.html\nIf one wants to filter using several consequences, then separate those by using '&' (i.e. 'consequence=3_prime_UTR_variant&intron_variant'.",
                    "hidden": true
                },
                "dbnsfp_fields": {
                    "type": "string",
                    "fa_icon": "fas fa-border-all",
                    "description": "Fields to annotate with",
                    "default": "rs_dbSNP,HGVSc_VEP,HGVSp_VEP,1000Gp3_EAS_AF,1000Gp3_AMR_AF,LRT_score,GERP++_RS,gnomAD_exomes_AF",
                    "help_text": "To be used with `--vep_dbnsfp`.\nThis params can be used to retrieve individual values from the dbNSFP file. The values correspond to the name of the columns in the dbNSFP file and are separated by comma.\nThe column names might differ between the different dbNSFP versions. Please check the Readme.txt file, which is provided with the dbNSFP file, to obtain the correct column names. The Readme file contains also a short description of the provided values and the version of the tools used to generate them.\n\nDefault value are explained below:\n\nrs_dbSNP - rs number from dbSNP\nHGVSc_VEP - HGVS coding variant presentation from VEP. Multiple entries separated by ';', corresponds to Ensembl_transcriptid\nHGVSp_VEP - HGVS protein variant presentation from VEP. Multiple entries separated by ';', corresponds to Ensembl_proteinid\n1000Gp3_EAS_AF - Alternative allele frequency in the 1000Gp3 East Asian descendent samples\n1000Gp3_AMR_AF - Alternative allele counts in the 1000Gp3 American descendent samples\nLRT_score - Original LRT two-sided p-value (LRTori), ranges from 0 to 1\nGERP++_RS - Conservation score. The larger the score, the more conserved the site, ranges from -12.3 to 6.17\ngnomAD_exomes_AF - Alternative allele frequency in the whole gnomAD exome samples.",
                    "hidden": true
                },
                "vep_loftee": {
                    "type": "boolean",
                    "fa_icon": "fas fa-database",
                    "description": "Enable the use of the VEP LOFTEE plugin.",
                    "hidden": true,
                    "help_text": "For details, see [here](https://github.com/konradjk/loftee)."
                },
                "vep_spliceai": {
                    "type": "boolean",
                    "fa_icon": "fas fa-database",
                    "description": "Enable the use of the VEP SpliceAI plugin.",
                    "hidden": true,
                    "help_text": "For details, see [here](https://www.ensembl.org/info/docs/tools/vep/script/vep_plugins.html#spliceai)."
                },
                "spliceai_snv": {
                    "type": "string",
                    "fa_icon": "fas fa-file",
                    "description": "Path to spliceai raw scores snv file.",
                    "help_text": "To be used with `--vep_spliceai`.",
                    "hidden": true
                },
                "spliceai_snv_tbi": {
                    "type": "string",
                    "fa_icon": "fas fa-file",
                    "description": "Path to spliceai raw scores snv tabix indexed file.",
                    "help_text": "To be used with `--vep_spliceai`.",
                    "hidden": true
                },
                "spliceai_indel": {
                    "type": "string",
                    "fa_icon": "fas fa-file",
                    "description": "Path to spliceai raw scores indel file.",
                    "help_text": "To be used with `--vep_spliceai`.",
                    "hidden": true
                },
                "spliceai_indel_tbi": {
                    "type": "string",
                    "fa_icon": "fas fa-file",
                    "description": "Path to spliceai raw scores indel tabix indexed file.",
                    "help_text": "To be used with `--vep_spliceai`.",
                    "hidden": true
                },
                "vep_spliceregion": {
                    "type": "boolean",
                    "fa_icon": "fas fa-database",
                    "description": "Enable the use of the VEP SpliceRegion plugin.",
                    "hidden": true,
                    "help_text": "For details, see [here](https://www.ensembl.org/info/docs/tools/vep/script/vep_plugins.html#spliceregion) and [here](https://www.ensembl.info/2018/10/26/cool-stuff-the-vep-can-do-splice-site-variant-annotation/)."
                },
                "vep_custom_args": {
                    "type": "string",
                    "default": "--everything --filter_common --per_gene --total_length --offline --format vcf",
                    "fa_icon": "fas fa-toolbox",
                    "description": "Add an extra custom argument to VEP.",
                    "hidden": true,
                    "help_text": "Using this params you can add custom args to VEP."
                },
                "use_annotation_cache_keys": {
                    "type": "boolean",
                    "fa_icon": "fas fa-toolbox",
                    "description": "Use annotation cache keys for snpeff_cache and vep_cache.",
                    "hidden": true
                },
                "outdir_cache": {
                    "type": "string",
                    "format": "directory-path",
                    "description": "The output directory where the cache will be saved. You have to use absolute paths to storage on Cloud infrastructure.",
                    "fa_icon": "fas fa-folder-open",
                    "hidden": true
                },
                "vep_out_format": {
                    "type": "string",
                    "default": "vcf",
                    "description": "VEP output-file format.",
                    "enum": [
                        "json",
                        "tab",
                        "vcf"
                    ],
                    "help_text": "Sets the format of the output-file from VEP. Available formats: json, tab and vcf.",
                    "fa_icon": "fas fa-table",
                    "hidden": true
                }
            }
        },
        "reference_genome_options": {
            "title": "Reference genome options",
            "type": "object",
            "fa_icon": "fas fa-dna",
            "description": "Reference genome related files and options required for the workflow.",
            "properties": {
                "genome": {
                    "type": "string",
                    "description": "Name of iGenomes reference.",
                    "default": "GATK.GRCh38",
                    "fa_icon": "fas fa-book",
                    "help_text": "If using a reference genome configured in the pipeline using iGenomes, use this parameter to give the ID for the reference. This is then used to build the full paths for all required reference genome files e.g. `--genome GRCh38`.\n\nSee the [nf-core website docs](https://nf-co.re/usage/reference_genomes) for more details."
                },
                "ascat_genome": {
                    "type": "string",
                    "fa_icon": "fa-solid fa-text",
                    "description": "ASCAT genome.",
                    "help_text": "If you use AWS iGenomes, this has already been set for you appropriately.\n\nMust be set to run ASCAT, either hg19 or hg38. If you use AWS iGenomes, this has already been set for you appropriately.",
                    "enum": [
                        "None",
                        "hg19",
                        "hg38"
                    ],
                    "hidden": true
                },
                "ascat_alleles": {
                    "type": "string",
                    "fa_icon": "fas fa-file",
                    "description": "Path to ASCAT allele zip file.",
                    "hidden": true,
                    "help_text": "If you use AWS iGenomes, this has already been set for you appropriately."
                },
                "ascat_loci": {
                    "type": "string",
                    "fa_icon": "fas fa-file",
                    "description": "Path to ASCAT loci zip file.",
                    "hidden": true,
                    "help_text": "If you use AWS iGenomes, this has already been set for you appropriately."
                },
                "ascat_loci_gc": {
                    "type": "string",
                    "fa_icon": "fas fa-file",
                    "description": "Path to ASCAT GC content correction file.",
                    "hidden": true,
                    "help_text": "If you use AWS iGenomes, this has already been set for you appropriately."
                },
                "ascat_loci_rt": {
                    "type": "string",
                    "fa_icon": "fas fa-file",
                    "description": "Path to ASCAT RT (replictiming) correction file.",
                    "hidden": true,
                    "help_text": "If you use AWS iGenomes, this has already been set for you appropriately."
                },
                "bwa": {
                    "type": "string",
                    "fa_icon": "fas fa-copy",
                    "description": "Path to BWA mem indices.",
                    "help_text": "If you use AWS iGenomes, this has already been set for you appropriately.\n\nIf you wish to recompute indices available on igenomes, set `--bwa false`.\n\n> **NB** If none provided, will be generated automatically from the FASTA reference. Combine with `--save_reference` to save for future runs.",
                    "hidden": true
                },
                "bwamem2": {
                    "type": "string",
                    "fa_icon": "fas fa-copy",
                    "description": "Path to bwa-mem2 mem indices.",
                    "help_text": "If you use AWS iGenomes, this has already been set for you appropriately.\n\nIf you wish to recompute indices available on igenomes, set `--bwamem2 false`.\n\n> **NB** If none provided, will be generated automatically from the FASTA reference, if `--aligner bwa-mem2` is specified. Combine with `--save_reference` to save for future runs.",
                    "hidden": true
                },
                "chr_dir": {
                    "type": "string",
                    "fa_icon": "fas fa-folder-open",
                    "description": "Path to chromosomes folder used with ControLFREEC.",
                    "hidden": true,
                    "help_text": "If you use AWS iGenomes, this has already been set for you appropriately."
                },
                "dbsnp": {
                    "type": "string",
                    "fa_icon": "fas fa-file",
                    "description": "Path to dbsnp file.",
                    "hidden": true,
                    "help_text": "If you use AWS iGenomes, this has already been set for you appropriately."
                },
                "dbsnp_tbi": {
                    "type": "string",
                    "fa_icon": "fas fa-file",
                    "description": "Path to dbsnp index.",
                    "help_text": "If you use AWS iGenomes, this has already been set for you appropriately.\n\n> **NB** If none provided, will be generated automatically from the dbsnp file. Combine with `--save_reference` to save for future runs.",
                    "hidden": true
                },
                "dbsnp_vqsr": {
                    "type": "string",
                    "fa_icon": "fas fa-copy",
                    "description": "label string for VariantRecalibration (haplotypecaller joint variant calling)"
                },
                "dict": {
                    "type": "string",
                    "fa_icon": "fas fa-file",
                    "description": "Path to FASTA dictionary file.",
                    "help_text": "If you use AWS iGenomes, this has already been set for you appropriately.\n\n> **NB** If none provided, will be generated automatically from the FASTA reference. Combine with `--save_reference` to save for future runs.",
                    "hidden": true
                },
                "fasta": {
                    "type": "string",
                    "format": "file-path",
                    "exists": true,
                    "mimetype": "text/plain",
                    "pattern": "^\\S+\\.fn?a(sta)?(\\.gz)?$",
                    "description": "Path to FASTA genome file.",
                    "help_text": "If you use AWS iGenomes, this has already been set for you appropriately.\n\nThis parameter is *mandatory* if `--genome` is not specified.",
                    "fa_icon": "far fa-file-code"
                },
                "fasta_fai": {
                    "type": "string",
                    "fa_icon": "fas fa-file",
                    "help_text": "If you use AWS iGenomes, this has already been set for you appropriately.\n\n> **NB** If none provided, will be generated automatically from the FASTA reference. Combine with `--save_reference` to save for future runs.",
                    "description": "Path to FASTA reference index."
                },
                "msisensorpro_list": {
                    "type": "string",
                    "fa_icon": "fas fa-file",
                    "help_text": "This is the output of msisensorpro scan. This is provided for hg19 through the remote repository. If not provided, will run msisensorpro scan.",
                    "description": "Path to MSIsensorPro list file."
                },
                "known_indels": {
                    "type": "string",
                    "fa_icon": "fas fa-copy",
                    "description": "Path to known indels file.",
                    "hidden": true,
                    "help_text": "If you use AWS iGenomes, this has already been set for you appropriately."
                },
                "known_indels_tbi": {
                    "type": "string",
                    "fa_icon": "fas fa-copy",
                    "description": "Path to known indels file index.",
                    "help_text": "If you use AWS iGenomes, this has already been set for you appropriately.\n\n> **NB** If none provided, will be generated automatically from the known index file, if provided. Combine with `--save_reference` to save for future runs.",
                    "hidden": true
                },
                "known_indels_vqsr": {
                    "type": "string",
                    "fa_icon": "fas fa-copy",
                    "description": "If you use AWS iGenomes, this has already been set for you appropriately.\n\n1st label string for VariantRecalibration (haplotypecaller joint variant calling)"
                },
                "known_snps": {
                    "type": "string",
                    "fa_icon": "fas fa-copy",
                    "description": "If you use AWS iGenomes, this has already been set for you appropriately.\n\nPath to known snps file."
                },
                "known_snps_tbi": {
                    "type": "string",
                    "fa_icon": "fas fa-copy",
                    "description": "Path to known snps file snps.",
                    "help_text": "If you use AWS iGenomes, this has already been set for you appropriately.\n\n> **NB** If none provided, will be generated automatically from the known index file, if provided. Combine with `--save_reference` to save for future runs."
                },
                "known_snps_vqsr": {
                    "type": "string",
                    "fa_icon": "fas fa-copy",
                    "description": "If you use AWS iGenomes, this has already been set for you appropriately.\n\nlabel string for VariantRecalibration (haplotypecaller joint variant calling)"
                },
                "save_reference": {
                    "type": "boolean",
                    "fa_icon": "fas fa-download",
                    "description": "Save built references.",
                    "help_text": "Set this parameter, if you wish to save all computed reference files. This is useful to avoid re-computation on future runs."
                },
                "build_only_index": {
                    "type": "boolean",
                    "fa_icon": "fas fa-download",
                    "description": "Only built references.",
                    "help_text": "Set this parameter, if you wish to compute and save all computed reference files. No alignment or any other downstream steps will be performed."
                },
                "download_cache": {
                    "type": "boolean",
                    "fa_icon": "fas fa-download",
                    "description": "Download annotation cache.",
                    "help_text": "Set this parameter, if you wish to download annotation cache."
                },
                "igenomes_base": {
                    "type": "string",
                    "format": "directory-path",
                    "description": "Directory / URL base for iGenomes references.",
                    "default": "s3://ngi-igenomes/igenomes/",
                    "fa_icon": "fas fa-cloud-download-alt"
                },
                "mski_base": {
                    "type": "string",
                    "format": "directory-path",
                    "description": "Directory / URL base for iGenomes references.",
                    "default": "s3://mskilab-pipeline/",
                    "fa_icon": "fas fa-cloud-download-alt"
                },
                "igenomes_ignore": {
                    "type": "boolean",
                    "description": "Do not load the iGenomes reference config.",
                    "fa_icon": "fas fa-ban",
                    "help_text": "Do not load `igenomes.config` when running the pipeline.\nYou may choose this option if you observe clashes between custom parameters and those supplied in `igenomes.config`.\n\n> **NB** You can then run by specifying at least a FASTA genome file."
                }
            },
            "help_text": "The pipeline config files come bundled with paths to the Illumina iGenomes reference index files.\nThe configuration is set up to use the AWS-iGenomes resource\ncf https://ewels.github.io/AWS-iGenomes/."
        },
        "institutional_config_options": {
            "title": "Institutional config options",
            "type": "object",
            "fa_icon": "fas fa-university",
            "description": "Parameters used to describe centralised config profiles. These should not be edited.",
            "help_text": "The centralised nf-core configuration profiles use a handful of pipeline parameters to describe themselves. This information is then printed to the Nextflow log when you run a pipeline. You should not need to change these values when you run a pipeline.",
            "properties": {
                "custom_config_version": {
                    "type": "string",
                    "description": "Git commit id for Institutional configs.",
                    "default": "master",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "custom_config_base": {
                    "type": "string",
                    "description": "Base directory for Institutional configs.",
                    "default": "https://raw.githubusercontent.com/nf-core/configs/master",
                    "hidden": true,
                    "help_text": "If you're running offline, Nextflow will not be able to fetch the institutional config files from the internet. If you don't need them, then this is not a problem. If you do need them, you should download the files from the repo and tell Nextflow where to find them with this parameter.",
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_name": {
                    "type": "string",
                    "description": "Institutional config name.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_description": {
                    "type": "string",
                    "description": "Institutional config description.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_contact": {
                    "type": "string",
                    "description": "Institutional config contact information.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_url": {
                    "type": "string",
                    "description": "Institutional config URL link.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "seq_center": {
                    "type": "string",
                    "fa_icon": "fas fa-university",
                    "description": "Sequencing center information to be added to read group (CN field).",
                    "hidden": true
                },
                "seq_platform": {
                    "type": "string",
                    "fa_icon": "fas fa-university",
                    "default": "ILLUMINA",
                    "description": "Sequencing platform information to be added to read group (PL field).",
                    "help_text": "Default: ILLUMINA. Will be used to create a proper header for further GATK4 downstream analysis.",
                    "hidden": true
                }
            }
        },
        "max_job_request_options": {
            "title": "Max job request options",
            "type": "object",
            "fa_icon": "fab fa-acquisitions-incorporated",
            "description": "Set the top limit for requested resources for any single job.",
            "help_text": "If you are running on a smaller system, a pipeline step requesting more resources than are available may cause the Nextflow to stop the run with an error. These options allow you to cap the maximum resources requested by any single job so that the pipeline will run on your system.\n\nNote that you can not _increase_ the resources requested by any job using these options. For that you will need your own configuration file. See [the nf-core website](https://nf-co.re/usage/configuration) for details.",
            "properties": {
                "max_cpus": {
                    "type": "integer",
                    "description": "Maximum number of CPUs that can be requested for any single job.",
                    "default": 16,
                    "fa_icon": "fas fa-microchip",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the CPU requirement for each process. Should be an integer e.g. `--max_cpus 1`."
                },
                "max_memory": {
                    "type": "string",
                    "description": "Maximum amount of memory that can be requested for any single job.",
                    "default": "256.GB",
                    "fa_icon": "fas fa-memory",
                    "pattern": "^\\d+(\\.\\d+)?\\.?\\s*(K|M|G|T)?B$",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the memory requirement for each process. Should be a string in the format integer-unit e.g. `--max_memory '8.GB'`."
                },
                "max_time": {
                    "type": "string",
                    "description": "Maximum amount of time that can be requested for any single job.",
                    "default": "360.h",
                    "fa_icon": "far fa-clock",
                    "pattern": "^(\\d+\\.?\\s*(s|m|h|d|day)\\s*)+$",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the time requirement for each process. Should be a string in the format integer-unit e.g. `--max_time '2.h'`."
                }
            }
        },
        "generic_options": {
            "title": "Generic options",
            "type": "object",
            "fa_icon": "fas fa-file-import",
            "description": "Less common options for the pipeline, typically set in a config file.",
            "help_text": "These options are common to all nf-core pipelines and allow you to customise some of the core preferences for how the pipeline runs.\n\nTypically these options would be set in a Nextflow config file loaded for all pipeline runs, such as `~/.nextflow/config`.",
            "properties": {
                "help": {
                    "type": "boolean",
                    "description": "Display help text.",
                    "fa_icon": "fas fa-question-circle",
                    "hidden": true
                },
                "version": {
                    "type": "boolean",
                    "description": "Display version and exit.",
                    "fa_icon": "fas fa-question-circle",
                    "hidden": true
                },
                "publish_dir_mode": {
                    "type": "string",
                    "default": "copy",
                    "description": "Method used to save pipeline results to output directory.",
                    "help_text": "The Nextflow `publishDir` option specifies which intermediate files should be saved to the output directory. This option tells the pipeline what method should be used to move these files. See [Nextflow docs](https://www.nextflow.io/docs/latest/process.html#publishdir) for details.",
                    "fa_icon": "fas fa-copy",
                    "enum": [
                        "symlink",
                        "rellink",
                        "link",
                        "copy",
                        "copyNoFollow",
                        "move"
                    ],
                    "hidden": true
                },
                "email": {
                    "type": "string",
                    "description": "Email address for completion summary.",
                    "fa_icon": "fas fa-envelope",
                    "help_text": "Set this parameter to your e-mail address to get a summary e-mail with details of the run sent to you when the workflow exits. If set in your user config file (`~/.nextflow/config`) then you don't need to specify this on the command line for every run.",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$"
                },
                "email_on_fail": {
                    "type": "string",
                    "description": "Email address for completion summary, only when pipeline fails.",
                    "fa_icon": "fas fa-exclamation-triangle",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$",
                    "help_text": "An email address to send a summary email to when the pipeline is completed - ONLY sent if the pipeline does not exit successfully.",
                    "hidden": true
                },
                "plaintext_email": {
                    "type": "boolean",
                    "description": "Send plain-text email instead of HTML.",
                    "fa_icon": "fas fa-remove-format",
                    "hidden": true
                },
                "max_multiqc_email_size": {
                    "type": "string",
                    "description": "File size limit when attaching MultiQC reports to summary emails.",
                    "pattern": "^\\d+(\\.\\d+)?\\.?\\s*(K|M|G|T)?B$",
                    "default": "25.MB",
                    "fa_icon": "fas fa-file-upload",
                    "hidden": true
                },
                "monochrome_logs": {
                    "type": "boolean",
                    "description": "Do not use coloured log outputs.",
                    "fa_icon": "fas fa-palette",
                    "hidden": true
                },
                "multiqc_title": {
                    "type": "string",
                    "description": "MultiQC report title. Printed as page header, used for filename if not otherwise specified.",
                    "fa_icon": "fas fa-file-signature"
                },
                "multiqc_config": {
                    "type": "string",
                    "format": "file-path",
                    "description": "Custom config file to supply to MultiQC.",
                    "fa_icon": "fas fa-cog",
                    "hidden": true
                },
                "multiqc_logo": {
                    "type": "string",
                    "description": "Custom logo file to supply to MultiQC. File name must also be set in the MultiQC config file",
                    "fa_icon": "fas fa-image",
                    "hidden": true
                },
                "multiqc_methods_description": {
                    "type": "string",
                    "description": "Custom MultiQC yaml file containing HTML including a methods description.",
                    "fa_icon": "fas fa-cog"
                },
                "validate_params": {
                    "type": "boolean",
                    "description": "Boolean whether to validate parameters against the schema at runtime",
                    "default": true,
                    "fa_icon": "fas fa-check-square",
                    "hidden": true
                },
                "validationShowHiddenParams": {
                    "type": "boolean",
                    "fa_icon": "far fa-eye-slash",
                    "description": "Show all params when using `--help`",
                    "hidden": true,
                    "help_text": "By default, parameters set as _hidden_ in the schema are not shown on the command line when a user runs with `--help`. Specifying this option will tell the pipeline to show all parameters."
                },
                "validationFailUnrecognisedParams": {
                    "type": "boolean",
                    "fa_icon": "far fa-check-circle",
                    "description": "Validation of parameters fails when an unrecognised parameter is found.",
                    "hidden": true,
                    "help_text": "By default, when an unrecognised parameter is found, it returns a warinig."
                },
                "validationLenientMode": {
                    "type": "boolean",
                    "fa_icon": "far fa-check-circle",
                    "description": "Validation of parameters in lenient more.",
                    "hidden": true,
                    "help_text": "Allows string values that are parseable as numbers or booleans. For further information see [JSONSchema docs](https://github.com/everit-org/json-schema#lenient-mode)."
                },
                "hook_url": {
                    "type": "string",
                    "description": "Incoming hook URL for messaging service",
                    "fa_icon": "fas fa-people-group",
                    "help_text": "Incoming hook URL for messaging service. Currently, MS Teams and Slack are supported.",
                    "hidden": true
                }
            }
        }
    },
    "allOf": [
        {
            "$ref": "#/definitions/input_output_options"
        },
        {
            "$ref": "#/definitions/main_options"
        },
        {
            "$ref": "#/definitions/fastq_preprocessing"
        },
        {
            "$ref": "#/definitions/preprocessing"
        },
        {
            "$ref": "#/definitions/sv_calling"
        },
        {
            "$ref": "#/definitions/hetpileups"
        },
        {
            "$ref": "#/definitions/fragcounter"
        },
        {
            "$ref": "#/definitions/dryclean"
        },
        {
            "$ref": "#/definitions/cbs"
        },
        {
            "$ref": "#/definitions/ascat_seg"
        },
        {
            "$ref": "#/definitions/jabba"
        },
        {
            "$ref": "#/definitions/variant_calling"
        },
        {
            "$ref": "#/definitions/annotation"
        },
        {
            "$ref": "#/definitions/reference_genome_options"
        },
        {
            "$ref": "#/definitions/institutional_config_options"
        },
        {
            "$ref": "#/definitions/max_job_request_options"
        },
        {
            "$ref": "#/definitions/generic_options"
        }
    ],
    "properties": {
        "validationSchemaIgnoreParams": {
            "type": "string",
            "default": "genomes, cf_ploidy"
        }
    }
}
