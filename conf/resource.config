process {

    withName: 'UNZIP.*|UNTAR.*|TABIX.*|BUILD_INTERVALS|CREATE_INTERVALS_BED|CUSTOM_DUMPSOFTWAREVERSIONS|VCFTOOLS|BCFTOOLS.*' {
        cpus            = { check_max( 1 * task.attempt, 'cpus' ) }
        memory          = { check_max( 1.GB * task.attempt, 'memory' ) }
    }
    withName: '.*FASTQC.*'{
        cpus            = { check_max( 4 * task.attempt, 'cpus' ) }
        memory          = { check_max( 16.GB * task.attempt, 'memory' ) }
        maxForks        = 2
        time            = { check_max( 8.h  * task.attempt, 'time'    ) }
    }
    withName: 'FASTP'{
        cpus            = { check_max( 12 * task.attempt, 'cpus' ) }
        memory          = { check_max( 4.GB * task.attempt, 'memory' ) }
    }
    withName: 'BWAMEM2_MEM|BWAMEM2_MEM' {
        cpus            = { check_max( 24 * task.attempt, 'cpus' ) }
        memory          = { check_max( 72.GB * task.attempt, 'memory' ) }
    }
    withName: '.*PARABRICKS_FQ2BAM.*' {
        cpus            = { check_max( 8 * task.attempt, 'cpus' ) }
        memory          = { check_max( 72.GB * task.attempt, 'memory' ) }
        time            = { check_max( 24.h  * task.attempt, 'time'    ) }
        ext.mem_limit =  { (task.memory.toGiga() * 0.25).toInteger() }
        // accelerator     = { check_max( 1 * task.attempt, 'accelerator') }
    }
    withName: 'SAMTOOLS_MERGE|SAMTOOLS_INDEX' {
        cpus            = { check_max( 16 * task.attempt, 'cpus' ) }
        memory          = { check_max( 4.GB * task.attempt, 'memory' ) }
    }
    withName: 'GATK4_MARKDUPLICATES|GATK4_MARKDUPLICATESSPARK' {
        cpus           = { check_max( 6 * task.attempt, 'cpus' ) }
        memory         = { check_max( 30.GB * task.attempt, 'memory' ) }
    }
    withName:'GATK4_APPLYBQSR|GATK4_APPLYBQSR_SPARK|GATK4_BASERECALIBRATOR|GATK4_BASERECALIBRATOR_SPARK|GATK4_GATHERBQSRREPORTS'{
        cpus            = { check_max( 2 * task.attempt, 'cpus' ) }
        memory          = { check_max( 4.GB * task.attempt, 'memory' ) }
    }
    withName:'MOSDEPTH'{
        cpus            = { check_max( 4 * task.attempt, 'cpus' ) }
        memory          = { check_max( 4.GB * task.attempt, 'memory' ) }
    }
    withName:'STRELKA.*|MANTA.*' {
        cpus            = { check_max( 10 * task.attempt, 'cpus' ) }
        memory          = { check_max( 8.GB * task.attempt, 'memory' ) }
    }
    withName:'SAMTOOLS_CONVERT'{
        memory          = { check_max( 4.GB * task.attempt, 'memory' ) }
    }
    withName:'GATK4_MERGEVCFS'{
        cpus            = { check_max( 2 * task.attempt, 'cpus' ) }
        memory          = { check_max( 4.GB * task.attempt, 'memory' ) }
    }
    withName:'PARABRICKS_BAMMETRICS' {
        cpus = 12
        memory = { check_max( 72.GB * task.attempt, 'memory' ) }
        time = { check_max( 8.h  * task.attempt, 'time'    ) }
    }
    withName: 'MULTIQC' {
        cpus            = { check_max( 1 * task.attempt, 'cpus' ) }
        memory          = { check_max( 1.GB * task.attempt, 'memory' ) }
    }
    withName: 'CRAM_TO_BAM|BAM_TO_CRAM' {
        cpus            = { check_max( 4 * task.attempt, 'cpus' ) }
        memory          = { check_max( 32.GB * task.attempt, 'memory' ) }
        time            = { check_max( 24.h  * task.attempt, 'time'   ) }
    }
    withName: 'SVABA' {
        cpus            = { check_max( 8 * task.attempt, 'cpus' ) }
        memory          = { check_max( 64.GB * task.attempt, 'memory' ) }
        time            = { check_max( 48.h  * task.attempt, 'time'    ) }
    }
    withName: 'GRIDSS_GRIDSS' {
        cpus            = { check_max( 8 * task.attempt, 'cpus' ) }
        memory          = { check_max( 32.GB * task.attempt, 'memory' ) }
        time            = { check_max( 48.h  * task.attempt, 'time'    ) }
    }

    withName: '.*GRIDSS_PREPROCESS.*' {
        // cpus            = { check_max( 8 * task.attempt, 'cpus' ) }
        // memory          = { check_max( 48.GB * task.attempt, 'memory' ) }
        // time            = { check_max( 8.h  * task.attempt, 'time'    ) }
        cpus            = { check_max( Math.round(16 * Math.pow(1.6666667, task.attempt - 1)), 'cpus' ) }
        memory          = { check_max( Math.round(64 * Math.pow(1.6666667, task.attempt - 1)).GB, 'memory' ) }
        time            = { check_max( Math.round(24 * Math.pow(1.5, task.attempt - 1)).h, 'time'    ) }
    }

    withName: '.*GRIDSS_ASSEMBLE_SCATTER.*' {
        // cpus            = { check_max( 16 * task.attempt, 'cpus' ) }
        // memory          = { check_max( 48.GB * task.attempt, 'memory' ) }
        // time            = { check_max( 8.h  * task.attempt, 'time'    ) }
        cpus            = { check_max( Math.round(16 * Math.pow(1.6666667, task.attempt - 1)), 'cpus' ) }
        memory          = { check_max( Math.round(48 * Math.pow(1.6666667, task.attempt - 1)).GB, 'memory' ) }
        time            = { check_max( Math.round(24 * Math.pow(1.5, task.attempt - 1)).h, 'time'    ) }
    }
    withName: '.*GRIDSS_ASSEMBLE_GATHER.*' {
        cpus            = { check_max( 8 * task.attempt, 'cpus' ) }
        memory          = { check_max( 48.GB * task.attempt, 'memory' ) }
        time            = { check_max( 4.h  * task.attempt, 'time'    ) }
    }
    withName: '.*GRIDSS_CALL.*' {
        cpus            = { check_max( 8 * task.attempt, 'cpus' ) }
        memory          = { check_max( 48.GB * task.attempt, 'memory' ) }
        time            = { check_max( 12.h  * task.attempt, 'time'    ) }
    }
    withName: '.*GRIDSS_SOMATIC' {
        cpus            = { check_max( 2 * task.attempt, 'cpus' ) }
        memory          = { check_max( 48.GB * task.attempt, 'memory' ) }
        time            = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
    withName: 'JUNCTION_FILTER' {
        cpus            = { check_max( 2 * task.attempt, 'cpus' ) }
        memory          = { check_max( 72.GB * task.attempt, 'memory' ) }
        time            = { check_max( 8.h  * task.attempt, 'time'    ) }
    }
    withName: 'HETPILEUPS' {
        cpus            = { check_max( 4 * task.attempt, 'cpus' ) }
        memory          = { check_max( 8.GB * task.attempt, 'memory' ) }
        time            = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
    withName: 'FRAGCOUNTER' {
        cpus            = { check_max( 3 * task.attempt, 'cpus' ) }
        memory          = { check_max( 4.GB * task.attempt, 'memory' ) }
        time            = { check_max( 8.h  * task.attempt, 'time'   ) }
    }
    withName: 'DRYCLEAN' {
        cpus            = { check_max( 2 * task.attempt, 'cpus' ) }
        memory          = { check_max( 48.GB * task.attempt, 'memory' ) }
        time            = { check_max( 1.h  * task.attempt, 'time'    ) }
    }
    withName: 'ASCAT_SEG' {
        cpus            = { check_max( 2 * task.attempt, 'cpus' ) }
        memory          = { check_max( 6.GB * task.attempt, 'memory' ) }
        time            = { check_max( 2.h  * task.attempt, 'time'    ) }
    }
    withName: 'CBS' {
        cpus            = { check_max( 2 * task.attempt, 'cpus' ) }
        memory          = { check_max( 32.GB * task.attempt, 'memory' ) }
        time            = { check_max( 1.h  * task.attempt, 'time'    ) }
    }
    withName: 'SAGE_SOMATIC' {
	    cpus            = { check_max( 20 * task.attempt, 'cpus' ) }
        memory          = { check_max( 64.GB * task.attempt, 'memory' ) }
        time            = { check_max( 5.h  * task.attempt, 'time'    ) }
    }
    withName: 'SAGE_GERMLINE' {
        cpus            = { check_max( 8 * task.attempt, 'cpus' ) }
        memory          = { check_max( 16.GB * task.attempt, 'memory' ) }
        time            = { check_max( 1.h  * task.attempt, 'time'    ) }
    }
    withName: '.*COERCE_SEQNAMES.*' {
        cpus             = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory           = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time             = { check_max( 16.h   * task.attempt, 'time'    ) }
    }
    withName: 'JABBA' {
        cpus            = { check_max( 16 * task.attempt, 'cpus' ) }
        memory          = { check_max( 80.GB * task.attempt, 'memory' ) }
        time            = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
    withName: 'ITDSEEK' {
        cpus            = { check_max( 4 * task.attempt, 'cpus' ) }
        memory          = { check_max( 16.GB * task.attempt, 'memory' ) }
        time            = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
    withName: 'EVENTS' {
        cpus            = { check_max( 3 * task.attempt, 'cpus' ) }
        memory          = { check_max( 8.GB * task.attempt, 'memory' ) }
        time            = { check_max( 4.h  * task.attempt, 'time'    ) }
    }
    withName: 'FUSIONS' {
        cpus            = { check_max( 5 * task.attempt, 'cpus' ) }
        memory          = { check_max( 80.GB * task.attempt, 'memory' ) }
        time            = { check_max( 4.h  * task.attempt, 'time'    ) }
    }
    withName: 'NON_INTEGER_BALANCE' {
        cpus            = { check_max( 10 * task.attempt, 'cpus' ) }
        memory          = { check_max( 16.GB * task.attempt, 'memory' ) }
        time            = { check_max( 4.h  * task.attempt, 'time'    ) }
    }
    withName: 'LP_PHASED_BALANCE' {
        // cpus            = { check_max( 16 * task.attempt, 'cpus' ) }
        cpus = 16
        // memory          = { check_max( 72.GB * task.attempt, 'memory' ) }
        memory = { check_max( Math.round(72 * Math.pow(1.6666667, task.attempt - 1)).GB, 'memory' ) }
        time = { check_max( 8.h  * task.attempt, 'time'    ) }
    }
    withName: 'HRDETECT' {
        cpus            = { check_max( 4 * task.attempt, 'cpus' ) }
        memory          = { check_max( 6.GB * task.attempt, 'memory' ) }
        time            = { check_max( 6.h  * task.attempt, 'time'    ) }
    }
    withName: 'SIGPROFILERASSIGNMENT' {
        cpus            = { check_max( 2 * task.attempt, 'cpus' ) }
        memory          = { check_max( 8.GB * task.attempt, 'memory' ) }
        time            = { check_max( 1.h  * task.attempt, 'time'    ) }
    }
    withName: 'SNPEFF_SNPEFF' {
        cpus            = { check_max( 4 * task.attempt, 'cpus' ) }
        memory          = { check_max( 32.GB * task.attempt, 'memory' ) }
        time            = { check_max( 4.h  * task.attempt, 'time'    ) }
    }
    withName: 'SNPEFF_VCF_TO_BCF' {
        cpus            = { check_max( 4 * task.attempt, 'cpus' ) }
        memory          = { check_max( 32.GB * task.attempt, 'memory' ) }
        time            = { check_max( 4.h  * task.attempt, 'time'    ) }
    }
    withName: 'STRELKA_SOMATIC' {
	    cpus            = { check_max( 16 * task.attempt, 'cpus' ) }
        memory          = { check_max( 64.GB * task.attempt, 'memory' ) }
        time            = { check_max( 5.h  * task.attempt, 'time'    ) }
    }
    withName: 'STRELKA_GERMLINE' {
        cpus            = { check_max( 8 * task.attempt, 'cpus' ) }
        memory          = { check_max( 16.GB * task.attempt, 'memory' ) }
        time            = { check_max( 1.h  * task.attempt, 'time'    ) }
    }
    withName:CUSTOM_DUMPSOFTWAREVERSIONS {
        cache = false
    }
}