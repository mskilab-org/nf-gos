process {
    withName: '.*SVABA' {
        ext.prefix       = { "${meta.id}.svaba" }
        publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/${meta.patient}/svaba/" },
                pattern: "*{vcf.gz,txt.gz,vcf*,bam,.command.*}"
            ]
    }

    withName: '.*GRIDSS_GRIDSS.*' {
        ext.prefix = { "${meta.id}.gridss" }
        publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/${meta.patient}/gridss/" },
                pattern: "*{vcf.bgz*,vcf.gz,txt.gz,vcf*,bam,.command.*}"
            ]
    }

    withName: '.*GRIDSS_ASSEMBLE_GATHER.*' {
        ext.prefix = { "${meta.id}.gridss" }
        publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/${meta.patient}/gridss/" },
                pattern: "*{assembly*bam}"
            ]
    }

    withName: '.*GRIDSS_CALL.*' {
        ext.prefix = { "${meta.id}.gridss" }
        publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/${meta.patient}/gridss/" },
                pattern: "*{vcf.bgz*,vcf.gz,txt.gz,vcf*,.command.*}"
            ]
    }

    withName: '.*GRIDSS_SOMATIC' {
        ext.prefix = { "${meta.id}.gridss" }
        publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/${meta.patient}/gridss/" },
                pattern: "*{vcf.bgz*,vcf.gz,txt.gz,vcf*,bam,.command.*}"
            ]
    }

    withName: '.*JUNCTION_FILTER' {

        publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/${meta.patient}/gridss/" },
                pattern: "*{.rds*,.command.*}"
            ]
    }

    withName: '.*AMBER' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/${meta.patient}/amber/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${filename}" },
        ]
    }

    withName: '.*COBALT' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/${meta.patient}/cobalt/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${filename}" },
        ]
    }

    withName: '.*PURPLE' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/${meta.patient}/" }, // omit purple because purple/ is emitted
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${filename}" },
        ]
    }

    withName: '.*TUMOR_FRAGCOUNTER:.*' {
        publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/${meta.patient}/fragcounter/tumor/" },
                pattern: "*{.rds,.bw,cov*,.command.*,1kb_*}"
        ]
    }

    withName: '.*NORMAL_FRAGCOUNTER:.*' {
        publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/${meta.patient}/fragcounter/normal/" },
                pattern: "*{.rds,.bw,cov*,.command.*,1kb_*}"
        ]
    }

    withName: '.*TUMOR_DRYCLEAN:DRYCLEAN' {
        publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/${meta.patient}/dryclean/tumor/" },
                pattern: "*{cov.rds,.command.*}"
        ]
    }

    withName: '.*NORMAL_DRYCLEAN:DRYCLEAN' {
        publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/${meta.patient}/dryclean/normal/" },
                pattern: "*{cov.rds,.command.*}"
        ]
    }

    withName: '.*MAKE_HET_SITES' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/${meta.patient}/amber/" },
            pattern: "*{.txt*,.command.*}"
        ]
    }

    withName: '.*CBS' {
        publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/${meta.patient}/cbs/" },
                pattern: "*{.rds,.command.*}"
        ]
    }

    withName: '.*RETIER_WHITELIST_JUNCTIONS' {
        publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/${meta.patient}/jabba/" },
                pattern: "*{.rds*,.vcf*}"
        ]
    }

    withName: '.*JABBA' {
        publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/${meta.patient}/jabba/" },
                pattern: "*{.rds*,.vcf,.seg,.png,.txt,.command.*}"
        ]
    }

    withName: '.*NON_INTEGER_BALANCE' {

        publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/${meta.patient}/non_integer_balance/" },
                pattern: "*{.rds*,.command.*}"
        ]
    }

    withName: '.*EVENTS' {
        publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/${meta.patient}/events/" },
                pattern: "*{.rds*,.command.*}"
        ]
    }

    withName: '.*FUSIONS' {
        publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/${meta.patient}/fusions/" },
                pattern: "*{.rds*,.command.*,*.tsv}"
        ]
    }

    withName: '.*LP_PHASED_BALANCE' {

        publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/${meta.patient}/lp_phased_balance/" },
                pattern: "*{.rds*,.command.*}"
        ]
    }

    withName: '.*STRELKA_SOMATIC' {
        publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/${meta.patient}/strelka/somatic/" },
                pattern: "*{vcf.gz,txt.gz,vcf*,.command.*}"
            ]
    }

    withName: '.*STRELKA_GERMLINE' {
        publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/${meta.patient}/strelka/germline/" },
                pattern: "*{vcf.gz,txt.gz,vcf*,.command.*}"
            ]
    }

    withName: '.*SAGE_SOMATIC|SAGE_PASS_FILTER' {
        publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/${meta.patient}/sage/somatic/" },
                pattern: "*{vcf.gz,txt.gz,vcf*,*.dict,.command.*}"
            ]
    }

    withName: '.*SAGE_GERMLINE' {
        publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/${meta.patient}/sage/germline/" },
                pattern: "*{vcf.gz,txt.gz,vcf*,*.dict,.command.*}"
            ]
    }

    withName: '.*SAGE_TUMOR_ONLY_FILTER' {
        publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/${meta.patient}/sage/somatic/tumor_only_filter/" },
                pattern: "*{vcf.gz,txt.gz,vcf*,*.dict,.command.*}"
            ]
    }

    withName: '.*RESCUE_CH_HEME' {
        publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/${meta.patient}/sage/somatic/rescue_ch_heme/" },
                pattern: "*{vcf*,.command.*}"
            ]
    }

    withName: '.*VCF_PAVE_SOMATIC:PAVE' {
        publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/${meta.patient}/pave/somatic/" },
                pattern: "*{.vcf*,.tbi*}"
        ]
    }

    withName: '.*VCF_PAVE_GERMLINE:PAVE' {
        publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/${meta.patient}/pave/germline/" },
                pattern: "*{.vcf*,.tbi*}"
        ]
    }

    withName: '.*VCF_SNPEFF_SOMATIC:.*' {
        ext.prefix       = {"${meta.patient}_somatic"}
        publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/${meta.patient}/snpeff/somatic/" },
                pattern: "*{.vcf*,.txt*,.html*,.csv*,.bcf*}"
        ]
    }

    withName: '.*VCF_SNPEFF_GERMLINE:.*' {
        ext.prefix       = {"${meta.patient}_germline"}
        publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/${meta.patient}/snpeff/germline/" },
                pattern: "*{.vcf*,.txt*,.html*,.csv*,.bcf*}"
        ]
    }

    withName: '.*VCF_SNV_MULTIPLICITY:SNV_MULTIPLICITY' {
        publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/${meta.patient}/snv_multiplicity/" },
                pattern: "*{.rds*}"
        ]
    }
    withName: '.*VCF_FUSIONS_CNA_ONCOKB_ANNOTATOR:ONCOKB_ANNOTATOR' {
        publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/${meta.patient}/oncokb/" },
                pattern: "*{.maf*,.tsv*}"
        ]
    }

    withName: '.*SIGPROFILERASSIGNMENT' {
        publishDir       = [
			[
				mode: params.publish_dir_mode,
				path: { "${params.outdir}/${meta.patient}/sigprofilerassignment/" },
				pattern: "*/**/*{.txt,.all}"
			], [
				mode: params.publish_dir_mode,
				path: { "${params.outdir}/${meta.patient}/sigprofilerassignment/" },
				pattern: "*/**/**/*{.txt,.all}"
			], [
				mode: params.publish_dir_mode,
				path: { "${params.outdir}/${meta.patient}/sigprofilerassignment/" },
				pattern: "*/**/**/**/*{.txt,.all}"
			], [
				mode: params.publish_dir_mode,
				path: { "${params.outdir}/${meta.patient}/sigprofilerassignment/" },
				pattern: "*/**/**/**/**/*{.txt,.all}"
			]
		]
		
    }

	withName: '.*FFPE_IMPACT_FILTER' {
        publishDir       = [
			mode: params.publish_dir_mode,
			path: { "${params.outdir}/${meta.patient}/ffpe_impact/" },
			pattern: "*.vcf*"
		]
    }

    withName: '.*HRDETECT' {
        publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/${meta.patient}/hrdetect/" },
                pattern: "*{.rds*,.txt,.command.*}"
        ]
    }

    withName: '.*ONENESS_TWONESS' {
        publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/${meta.patient}/onenesstwoness/" },
                pattern: "*{.rds*,.txt,.command.*}"
        ]
    }

    withName: 'UNZIP.*|UNTAR.*|TABIX.*|BUILD_INTERVALS|CREATE_INTERVALS_BED|CUSTOM_DUMPSOFTWAREVERSIONS|VCFTOOLS|BCFTOOLS.*' {
        cpus            = { check_max( 1 * task.attempt, 'cpus' ) }
        memory          = { check_max( 1.GB * task.attempt, 'memory' ) }
    }
    withName: '.*FASTQC.*'{
        cpus            = { check_max( 4 * task.attempt, 'cpus' ) }
        memory          = { check_max( 16.GB * task.attempt, 'memory' ) }
        maxForks        = 2
        errorStrategy   = 'retry'
        maxRetries = params.get("maxRetries_setting", 99999)
        maxErrors = params.get("maxErrors_setting", 99999)
        time            = { check_max( 8.h  * task.attempt, 'time'    ) }
    }
    withName: 'FASTP'{
        cpus            = { check_max( 12 * task.attempt, 'cpus' ) }
        memory          = { check_max( 4.GB * task.attempt, 'memory' ) }
    }
    withName: 'BWAMEM2_MEM|BWAMEM2_MEM' {
        cpus            = { check_max( 24 * task.attempt, 'cpus' ) }
        memory          = { check_max( 72.GB * task.attempt, 'memory' ) }
    }
    withName: '.*PARABRICKS_FQ2BAM.*' {
        cpus            = { check_max( 8 * task.attempt, 'cpus' ) }
        memory          = { check_max( 72.GB * task.attempt, 'memory' ) }
        time            = { check_max( 24.h  * task.attempt, 'time'    ) }
        // accelerator     = { check_max( 1 * task.attempt, 'accelerator') }
    }
    withName: 'SAMTOOLS_MERGE|SAMTOOLS_INDEX' {
        cpus            = { check_max( 16 * task.attempt, 'cpus' ) }
        memory          = { check_max( 4.GB * task.attempt, 'memory' ) }
    }
    withName: 'GATK4_MARKDUPLICATES|GATK4_MARKDUPLICATESSPARK' {
        cpus           = { check_max( 6 * task.attempt, 'cpus' ) }
        memory         = { check_max( 30.GB * task.attempt, 'memory' ) }
    }
    withName:'GATK4_APPLYBQSR|GATK4_APPLYBQSR_SPARK|GATK4_BASERECALIBRATOR|GATK4_BASERECALIBRATOR_SPARK|GATK4_GATHERBQSRREPORTS'{
        cpus            = { check_max( 2 * task.attempt, 'cpus' ) }
        memory          = { check_max( 4.GB * task.attempt, 'memory' ) }
    }
    withName:'MOSDEPTH'{
        cpus            = { check_max( 4 * task.attempt, 'cpus' ) }
        memory          = { check_max( 4.GB * task.attempt, 'memory' ) }
    }
    withName:'STRELKA.*|MANTA.*' {
        cpus            = { check_max( 10 * task.attempt, 'cpus' ) }
        memory          = { check_max( 8.GB * task.attempt, 'memory' ) }
    }
    withName:'SAMTOOLS_CONVERT'{
        memory          = { check_max( 4.GB * task.attempt, 'memory' ) }
    }
    withName:'GATK4_MERGEVCFS'{
        cpus            = { check_max( 2 * task.attempt, 'cpus' ) }
        memory          = { check_max( 4.GB * task.attempt, 'memory' ) }
    }
    withName:'PARABRICKS_BAMMETRICS' {
        cpus = 12
        memory = { check_max( 72.GB * task.attempt, 'memory' ) }
        time = { check_max( 8.h  * task.attempt, 'time'    ) }
    }
    withName: 'MULTIQC' {
        cpus            = { check_max( 1 * task.attempt, 'cpus' ) }
        memory          = { check_max( 1.GB * task.attempt, 'memory' ) }
    }
    withName: 'CRAM_TO_BAM|BAM_TO_CRAM' {
        cpus            = { check_max( 4 * task.attempt, 'cpus' ) }
        memory          = { check_max( 32.GB * task.attempt, 'memory' ) }
        time            = { check_max( 24.h  * task.attempt, 'time'   ) }
    }
    withName: 'SVABA' {
        cpus            = { check_max( 8 * task.attempt, 'cpus' ) }
        memory          = { check_max( 64.GB * task.attempt, 'memory' ) }
        time            = { check_max( 48.h  * task.attempt, 'time'    ) }
    }
    withName: 'GRIDSS_GRIDSS' {
        errorStrategy   = "retry"
        maxRetries = params.get("maxRetries_setting", 99999)
        maxErrors = params.get("maxErrors_setting", 99999)
        cpus            = { check_max( 8 * task.attempt, 'cpus' ) }
        memory          = { check_max( 32.GB * task.attempt, 'memory' ) }
        time            = { check_max( 48.h  * task.attempt, 'time'    ) }
    }

    withName: '.*GRIDSS_PREPROCESS.*' {
        errorStrategy   = "retry"
        cpus            = { check_max( 8 * task.attempt, 'cpus' ) }
        memory          = { check_max( 48.GB * task.attempt, 'memory' ) }
        time            = { check_max( 48.h  * task.attempt, 'time'    ) }
    }

    withName: '.*GRIDSS_ASSEMBLE_SCATTER.*' {
        errorStrategy   = "retry"
        maxRetries = params.get("maxRetries_setting", 99999)
        maxErrors = params.get("maxErrors_setting", 99999)
        cpus            = { check_max( 8 * task.attempt, 'cpus' ) }
        memory          = { check_max( 48.GB * task.attempt, 'memory' ) }
        time            = { check_max( 48.h  * task.attempt, 'time'    ) }
    }
    withName: '.*GRIDSS_ASSEMBLE_GATHER.*' {
        errorStrategy   = "retry"
        maxRetries = params.get("maxRetries_setting", 99999)
        maxErrors = params.get("maxErrors_setting", 99999)
        cpus            = { check_max( 8 * task.attempt, 'cpus' ) }
        memory          = { check_max( 48.GB * task.attempt, 'memory' ) }
        time            = { check_max( 48.h  * task.attempt, 'time'    ) }
    }
    withName: '.*GRIDSS_CALL.*' {
        errorStrategy   = "retry"
        maxRetries = params.get("maxRetries_setting", 99999)
        maxErrors = params.get("maxErrors_setting", 99999)
        cpus            = { check_max( 8 * task.attempt, 'cpus' ) }
        memory          = { check_max( 48.GB * task.attempt, 'memory' ) }
        time            = { check_max( 48.h  * task.attempt, 'time'    ) }
    }
    withName: '.*GRIDSS_SOMATIC' {
        errorStrategy   = "retry"
        maxRetries = params.get("maxRetries_setting", 99999)
        maxErrors = params.get("maxErrors_setting", 99999)
        cpus            = { check_max( 2 * task.attempt, 'cpus' ) }
        memory          = { check_max( 48.GB * task.attempt, 'memory' ) }
        time            = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
    withName: 'JUNCTION_FILTER' {
        cpus            = { check_max( 2 * task.attempt, 'cpus' ) }
        memory          = { check_max( 72.GB * task.attempt, 'memory' ) }
        time            = { check_max( 8.h  * task.attempt, 'time'    ) }
    }
    withName: 'HETPILEUPS' {
        cpus            = { check_max( 4 * task.attempt, 'cpus' ) }
        memory          = { check_max( 8.GB * task.attempt, 'memory' ) }
        time            = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
    withName: 'FRAGCOUNTER' {
        cpus            = { check_max( 3 * task.attempt, 'cpus' ) }
        memory          = { check_max( 4.GB * task.attempt, 'memory' ) }
        time            = { check_max( 8.h  * task.attempt, 'time'   ) }
    }
    withName: 'DRYCLEAN' {
        cpus            = { check_max( 2 * task.attempt, 'cpus' ) }
        memory          = { check_max( 48.GB * task.attempt, 'memory' ) }
        time            = { check_max( 1.h  * task.attempt, 'time'    ) }
    }
    withName: 'ASCAT_SEG' {
        cpus            = { check_max( 2 * task.attempt, 'cpus' ) }
        memory          = { check_max( 6.GB * task.attempt, 'memory' ) }
        time            = { check_max( 2.h  * task.attempt, 'time'    ) }
    }
    withName: 'CBS' {
        cpus            = { check_max( 2 * task.attempt, 'cpus' ) }
        memory          = { check_max( 32.GB * task.attempt, 'memory' ) }
        time            = { check_max( 1.h  * task.attempt, 'time'    ) }
    }
    withName: 'SAGE_SOMATIC' {
	    cpus            = { check_max( 20 * task.attempt, 'cpus' ) }
        memory          = { check_max( 64.GB * task.attempt, 'memory' ) }
        time            = { check_max( 5.h  * task.attempt, 'time'    ) }
    }
    withName: 'SAGE_GERMLINE' {
        cpus            = { check_max( 8 * task.attempt, 'cpus' ) }
        memory          = { check_max( 16.GB * task.attempt, 'memory' ) }
        time            = { check_max( 1.h  * task.attempt, 'time'    ) }
    }
    withName: 'COERCE_SEQNAMES' {
        cpus             = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory           = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time             = { check_max( 16.h   * task.attempt, 'time'    ) }
    }
    withName: 'JABBA' {
        cpus            = { check_max( 16 * task.attempt, 'cpus' ) }
        memory          = { check_max( 80.GB * task.attempt, 'memory' ) }
        time            = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
    withName: 'EVENTS' {
        cpus            = { check_max( 3 * task.attempt, 'cpus' ) }
        memory          = { check_max( 8.GB * task.attempt, 'memory' ) }
        time            = { check_max( 4.h  * task.attempt, 'time'    ) }
    }
    withName: 'FUSIONS' {
        cpus            = { check_max( 5 * task.attempt, 'cpus' ) }
        memory          = { check_max( 80.GB * task.attempt, 'memory' ) }
        time            = { check_max( 4.h  * task.attempt, 'time'    ) }
    }
    withName: 'NON_INTEGER_BALANCE' {
        cpus            = { check_max( 10 * task.attempt, 'cpus' ) }
        memory          = { check_max( 16.GB * task.attempt, 'memory' ) }
        time            = { check_max( 4.h  * task.attempt, 'time'    ) }
    }
    withName: '.*LP_PHASED_BALANCE.*' {
        cpus            = { check_max( 16 * task.attempt, 'cpus' ) }
        memory          = { check_max( 64.GB * task.attempt, 'memory' ) }
        time            = { check_max( 8.h  * task.attempt, 'time'    ) }
    }
    withName: 'HRDETECT' {
        cpus            = { check_max( 4 * task.attempt, 'cpus' ) }
        memory          = { check_max( 6.GB * task.attempt, 'memory' ) }
        time            = { check_max( 6.h  * task.attempt, 'time'    ) }
    }
    withName: 'SIGPROFILERASSIGNMENT' {
        cpus            = { check_max( 2 * task.attempt, 'cpus' ) }
        memory          = { check_max( 8.GB * task.attempt, 'memory' ) }
        time            = { check_max( 1.h  * task.attempt, 'time'    ) }
    }
    withName: 'SNPEFF_SNPEFF' {
        cpus            = { check_max( 4 * task.attempt, 'cpus' ) }
        memory          = { check_max( 32.GB * task.attempt, 'memory' ) }
        time            = { check_max( 4.h  * task.attempt, 'time'    ) }
    }
    withName: 'SNPEFF_VCF_TO_BCF' {
        cpus            = { check_max( 4 * task.attempt, 'cpus' ) }
        memory          = { check_max( 32.GB * task.attempt, 'memory' ) }
        time            = { check_max( 4.h  * task.attempt, 'time'    ) }
    }
    withName: 'STRELKA_SOMATIC' {
	    cpus            = { check_max( 16 * task.attempt, 'cpus' ) }
        memory          = { check_max( 64.GB * task.attempt, 'memory' ) }
        time            = { check_max( 5.h  * task.attempt, 'time'    ) }
    }
    withName: 'STRELKA_GERMLINE' {
        cpus            = { check_max( 8 * task.attempt, 'cpus' ) }
        memory          = { check_max( 16.GB * task.attempt, 'memory' ) }
        time            = { check_max( 1.h  * task.attempt, 'time'    ) }
    }
    withName:CUSTOM_DUMPSOFTWAREVERSIONS {
        cache = false
    }
}