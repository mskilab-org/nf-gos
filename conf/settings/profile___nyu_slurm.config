def singularityModule = "singularity/3.11.5"
params {
    config_profile_name           = 'mskilab-org NYU cluster'
    config_profile_description    = "mskilab-org Nextflow config for NYU cluster"
    config_profile_contact        = "kevinmhadi@gmail.com"

    cplexDir                      = "/gpfs/data/imielinskilab/Software/CPLEX"
    mski_base                     = "/gpfs/data/imielinskilab/data/nf_gos_files/mskilab_pipeline"
    igenomes_base                 = "/gpfs/data/imielinskilab/data/nf_gos_files/igenomes"
    snpeff_cache                  = "/gpfs/data/imielinskilab/data/nf_gos_files/mskilab_pipeline/snpeff_cache"
    sigprofiler_cache             = "/gpfs/data/imielinskilab/data/nf_gos_files/mskilab_pipeline/sigprofilerassignment"
    vep_dir_oncokb                = "/gpfs/data/imielinskilab/DB/VEP_/"
    use_gpu                       = true // Use GPU for PARABRICKS_FQ2BAM and BAMMETRICS and GPU_ by default

    // Resources
    max_memory = 256.GB
    max_cpus = 36
    max_time = 168.h


}

process {
    // queue = 'imielinskilab,a100_long,gpu4_long,cpu_long'

    withName: '.*' {
        // errorStrategy = { task.exitStatus in ([130..145] + [104, 155, 255]) ? 'retry' : 'finish' }
        errorStrategy = "retry"
        maxRetries = params.get("maxRetries_setting", 99999)
        maxErrors = params.get("maxErrors_setting", 99999)
    }

    // errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    errorStrategy = "retry"
    maxRetries = params.get("maxRetries_setting", 99999)
    maxErrors = params.get("maxErrors_setting", 99999)
    maxAttempt = params.get("maxAttempts_setting", 99999)

    containerOptions = null

    withName: '.*FASTQC.*' {
        maxForks = 2
    }

    withName: '.*PARABRICKS_FQ2BAM.*' {
        errorStrategy = "retry"
        accelerator = [request: 1, type: "a100"]
        clusterOptions = "--gres=gpu:a100:${accelerator.request}"
        // memory = { check_max( 72.GB * task.attempt, 'memory' ) } // Refers to CPU RAM requested on node
        memory = { check_max( Math.round(84 * Math.pow(1.6666667, task.attempt - 1)).GB, 'memory' ) } // Refers to CPU RAM requested on node
        cpus = 8 // Affects CPU RAM usage. Ideally should be divisible by accelerator.request value
        // time = { check_max( 24.h * task.attempt, 'time' ) } 
        time = { check_max( Math.round(24 * Math.pow(1.66666667, task.attempt - 1)).h, 'time' ) } 
        ext = [
            mem_limit: { (task.memory.toGiga() * 0.25).toInteger() }, 
            bwa_streams: 2, // Affects GPU memory usage, 1 for 16 GB, 2 for 16-40 GB, 4 for 40-80 GB (a100)
            low_memory_command: "", // Refers to memory on GPU device, not CPU RAM on node
            normalized_queue_capacity: 5 // Affects CPU RAM Usage. 10 is default. 5 is to make sure OOM doesn't occur. Ideally should be divisible by accelerator.request value
        ]
    }

    withName: 'PARABRICKS_BAMMETRICS' {
        errorStrategy = "retry"
        accelerator = [request: 1, type: "a100"]
        clusterOptions = "--gres=gpu:a100:${accelerator.request}"
        cpus = 12
        memory = { check_max( 72.GB * task.attempt, 'memory' ) }
        time = { check_max( 8.h  * task.attempt, 'time'    ) }
    }

    withName: 'GPU_COLLECTMULTIPLEMETRICS' {
        errorStrategy = "retry"
        maxRetries = params.get("maxRetries_setting", 99999)
        maxErrors = params.get("maxErrors_setting", 99999)
        accelerator = [request: 1, type: "a100"]
        clusterOptions = "--gres=gpu:a100:${accelerator.request}"
        time = { check_max( 4.h  * task.attempt, 'time'    ) }
    }

    withName: '.*JABBA.*' {
        errorStrategy = "retry"
        maxRetries = params.get("maxRetries_setting", 99999)
        maxErrors = params.get("maxErrors_setting", 99999)
        // Check if CPLEX directory exists
        def cplexExists = new File(params.cplexDir).exists()

        // Conditionally set container options and environment variable
        containerOptions = cplexExists ?
            "--bind ${params.cplexDir}:/opt/cplex --env PATH=/usr/local/bin/:/opt/cplex/bin/x86-64_linux:\$PATH" : "--env PATH=\$PATH"
    }

    withName: 'NON_INTEGER_BALANCE' {
        errorStrategy = "retry"
        maxRetries = params.get("maxRetries_setting", 99999)
        maxErrors = params.get("maxErrors_setting", 99999)
        // Check if CPLEX directory exists
        def cplexExists = new File(params.cplexDir).exists()

        // Conditionally set container options and environment variable
        containerOptions = cplexExists ?
            "--bind ${params.cplexDir}:/opt/cplex --env PATH=/usr/local/bin/:/opt/cplex/bin/x86-64_linux:\$PATH" : "--env PATH=\$PATH"
    }

    withName: '.*LP_PHASED_BALANCE.*' {
        errorStrategy = "retry"
        maxRetries = params.get("maxRetries_setting", 99999)
        maxErrors = params.get("maxErrors_setting", 99999)
        // Check if CPLEX directory exists
        def cplexExists = new File(params.cplexDir).exists()

        // Conditionally set container options and environment variable
        containerOptions = cplexExists ?
            "--bind ${params.cplexDir}:/opt/cplex --env PATH=/usr/local/bin/:/opt/cplex/bin/x86-64_linux:\$PATH" : "--env PATH=\$PATH"
    }


    // default SLURM node config
    beforeScript = """
        module load $singularityModule
        module load java
        module load cuda
        module load aws-cli
    """
}

executor {
    name = 'slurm'
    queueSize = 100
    retry {
        delay = '10s'
        jitter = 0.75
        maxAttempts = params.get("maxAttempts_setting", 99999)
        maxAttempt = params.get("maxAttempts_setting", 99999)
        maxDelay = '180s'
    }
    submitRateLimit = '100/10sec'
}
// 

singularity {
    enabled = true
    cacheDir = "/gpfs/data/imielinskilab/data/pipeline/container_images_cache"
}