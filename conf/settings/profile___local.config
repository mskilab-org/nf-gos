
// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'accelerator') {
        try {
            return Math.min( obj, params.max_accelerator as int )
        } catch (all) {
            println "   ### ERROR ###   Max gpu '${params.max_accelerator}' is not valid! Using default value: $obj"
            return obj
        }
    }
}


errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }

def singularityModule = "singularity/3.11.5"

params = [:]
params.max_memory = 500.GB
params.max_cpus = 192
params.max_time = 240.h

process {
    executor = 'local'
    queueSize = 40 
    
//     containerOptions = null
    

    withName: 'PARABRICKS_FQ2BAM' {
        maxForks = 2
        accelerator = [request: 1, type: "a100"]
        clusterOptions = "--gres=gpu:a100:${accelerator.request}"
        cpus   = { check_max( 8    * task.attempt, 'cpus'    ) }
        memory = { check_max( 72.GB * task.attempt, 'memory'  ) } // memory is set to 0.4 * this value in parabricks fq2bam for slurm. This will allow the process to set 48 GB inside the pipeline when running locally.
        time   = { check_max( 8.h  * task.attempt, 'time'    ) }
    }
    

    withName: '.*FASTQC.*' {
        maxForks = 10
    }

    withName: '.*FASTP.*' {
        maxForks = 10
    }

    withName: 'PARABRICKS_BAMMETRICS' {
        maxForks = 2
    }

    withName: 'GPU_COLLECTMULTIPLEMETRICS' {
        maxForks = 2
    }

    withName: 'GRIDSS_ASSEMBLE_SCATTER' {
        maxForks = 8
    }


    // default SLURM node config
    beforeScript = """
        module load $singularityModule
        module load java
        module load cuda
        module load aws-cli
    """
}

