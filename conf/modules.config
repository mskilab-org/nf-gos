/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {
    withName: '.*' {
        // errorStrategy = { task.exitStatus in ([130..145] + [104, 155, 255]) ? 'retry' : 'finish' }
        errorStrategy = "retry"
        maxErrors = params.get("maxErrors_setting", 99999)
	    maxRetries = params.get("maxRetries_setting", 99999)
    }

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SNPEFF_DOWNLOAD' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { params.outdir_cache ? "${params.outdir_cache}/": "${params.outdir}/cache/snpeff/" }
        ]
    }

    withName: 'ENSEMBLVEP_DOWNLOAD' {
        ext.args         = '--AUTO c --CONVERT --NO_BIOPERL --NO_HTSLIB --NO_TEST --NO_UPDATE'
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { params.outdir_cache ? "${params.outdir_cache}/": "${params.outdir}/cache/vep/" }
        ]
    }

    withName: 'CREATE_INTERVALS_BED' {
        publishDir       = [
            enabled: (params.save_reference || params.build_only_index),
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/intervals" },
            pattern: "*bed"
        ]
    }

    withName: 'GATK4_INTERVALLISTTOBED' {
        publishDir       = [
            enabled: (params.save_reference || params.build_only_index),
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/intervals" },
            pattern: "*bed"
        ]
    }

    withName: 'TABIX_BGZIPTABIX_INTERVAL_SPLIT' {
        ext.prefix       = {"${meta.patient}"}
        publishDir       = [
            enabled: (params.save_reference || params.build_only_index),
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/intervals" },
            pattern: "*bed.gz"
        ]
    }

    withName: 'BWAMEM2_INDEX' {
        publishDir       = [
            enabled: (params.save_reference || params.build_only_index),
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference" },
            pattern: "bwamem2"
        ]
    }

    withName: 'GATK4_CREATESEQUENCEDICTIONARY' {
        ext.when         = { !params.dict }
        publishDir       = [
            enabled: (params.save_reference || params.build_only_index),
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/dict" },
            pattern: "*dict"
        ]
    }

    withName: 'SAMTOOLS_FAIDX' {
        ext.when         = { !params.fasta_fai }
        publishDir       = [
            enabled: (params.save_reference || params.build_only_index),
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/fai" },
            pattern: "*fai"
        ]
    }

    withName: 'TABIX_DBSNP' {
        ext.when         = { !params.dbsnp_tbi && params.dbsnp }
        publishDir       = [
            enabled: (params.save_reference || params.build_only_index),
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/dbsnp" },
            pattern: "*vcf.gz.tbi"
        ]
    }

    withName: 'TABIX_GERMLINE_RESOURCE' {
        ext.when         = { !params.germline_resource_tbi && params.germline_resource }
        publishDir       = [
            enabled: (params.save_reference || params.build_only_index),
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/germline_resource" },
            pattern: "*vcf.gz.tbi"
        ]
    }

    withName: 'TABIX_KNOWN_INDELS' {
        ext.when         = { !params.known_indels_tbi && params.known_indels }
        publishDir       = [
            enabled: (params.save_reference || params.build_only_index),
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/known_indels" },
            pattern: "*vcf.gz.tbi"
        ]
    }

    withName: 'TABIX_KNOWN_SNPS' {
        ext.when         = { !params.known_snps_tbi && params.known_snps }
        publishDir       = [
            enabled: (params.save_reference || params.build_only_index),
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/known_snps" },
            pattern: "*vcf.gz.tbi"
        ]
    }

    withName: 'TABIX_PON' {
        ext.when         = { !params.pon_tbi && params.pon }
        publishDir       = [
            enabled: (params.save_reference || params.build_only_index),
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/pon" },
            pattern: "*vcf.gz.tbi"
        ]
    }

    withName: 'UNZIP_ALLELES|UNZIP_LOCI|UNZIP_GC|UNZIP_RT' {
        publishDir       = [
            enabled: false
        ]
    }

    withName: ".*FASTQC.*" {
        // ext.args = '--quiet'
        publishDir       = [
            [
                path: { "${params.outdir}/${meta.patient}/fastqc/" },
                mode: params.publish_dir_mode,
                pattern: "*{html,zip}"
            ]
        ]
    }

    withName: 'FASTP' {
        ext.args = [ "",
            !params.trim_fastq             ? "--disable_adapter_trimming"                 : "", // Disable adapter trimming
            params.clip_r1 > 0             ? "--trim_front1 ${params.clip_r1}"            : "", // Remove bp from the 5' end of read 1
            params.clip_r2   > 0           ? "--trim_front2 ${params.clip_r2}"            : "", // Remove bp from the 5' end of read 2
            params.three_prime_clip_r1 > 0 ? "--trim_tail1 ${params.three_prime_clip_r1}" : "", // Remove bp from the 3' end of read 1 AFTER adapter/quality trimming has been performed
            params.three_prime_clip_r2 > 0 ? "--trim_tail2 ${params.three_prime_clip_r2}" : "", // Remove bp from the 3' end of read 2 AFTER adapter/quality trimming has been performed
            params.trim_nextseq            ? "--trim_poly_g"                              : "", // Apply the --nextseq=X option, to trim based on quality after removing poly-G tails
            params.split_fastq > 0         ? "--split_by_lines ${params.split_fastq * 4}" : ""
        ].join(" ").trim()
        publishDir = [
            [
                path: { "${params.outdir}/${meta.sample}/qc_reports/fastp/" },
                mode: params.publish_dir_mode,
                pattern: "*.{html,json,log}"
            ],
            [
                enabled: params.save_trimmed || params.save_split_fastqs,
                path: { "${params.outdir}/${meta.sample}/fastp/" },
                mode: params.publish_dir_mode,
                pattern: "*.fastp.fastq.gz"
            ]
        ]
    }

    withName: ".*PARABRICKS_FQ2BAM.*" {
		publishDir       = [
            mode: params.publish_dir_mode,
            path: { 
				def label = meta.status == 1 ? 'tumor' : 'normal'
				"${params.outdir}/${meta.patient}/alignment/${label}/" 
				// "${params.outdir}/${meta.patient}/alignment/"
			},
            pattern: "*{bam,bai,duplicate*metrics*,qc*metrics*}",
            // Only save if (save_output_as_bam AND (no_markduplicates OR save_mapped ))
            saveAs: { filename -> params.aligner == "fq2bam" ? "fq2bam/${filename}" : "$filename" }
        ]
        ext.when         = { params.aligner == "fq2bam" }
    }

    withName: ".*CONPAIR.*" {
		publishDir       = [
            mode: params.publish_dir_mode,
            path: { 
				"${params.outdir}/${meta.patient}/conpair/" 
				// "${params.outdir}/${meta.patient}/alignment/"
			},
            pattern: "*{contamination*,concordance*}",
        ]
    }

    withName: ".*BWAMEM2_MEM.*" {
		publishDir       = [
            mode: params.publish_dir_mode,
            path: { 
				def label = meta.status == 1 ? 'tumor' : 'normal'
				"${params.outdir}/${meta.patient}/alignment/${label}/" 
				// "${params.outdir}/${meta.patient}/alignment/"
			},
            pattern: "*{bam,bai,duplicate*metrics*}",
            // Only save if (save_output_as_bam AND (no_markduplicates OR save_mapped ))
            saveAs: { params.aligner == "fq2bam" ? "fq2bam/${it}" : "$it" }
        ]
        ext.when         = { params.aligner == "bwa-mem2" }
    }

    withName: "(BWAMEM.*_MEM|DRAGMAP_ALIGN|SENTIEON_BWAMEM)" {
        ext.prefix       = { params.split_fastq > 1 ? "${meta.id}".concat('.').concat(reads.get(0).name.tokenize('.')[0]) : "${meta.id}.sorted" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/alignment/" },
            pattern: "*bam",
            // Only save if save_output_as_bam AND
            // (save_mapped OR no_markduplicates OR sentieon_dedup) AND
            // only a single BAM file per sample
            saveAs: {
                if (params.save_output_as_bam &&
                    (
                        params.save_mapped ||
                        (params.skip_tools && params.skip_tools.split(',').contains('markduplicates')) &&
                        !(params.tools && params.tools.split(',').contains('sentieon_dedup'))
                    ) && (meta.size * meta.num_lanes == 1)
                ) { "${meta.patient}/mapped/${it}" }
                else { null }
            }
        ]
    }

    withName: "(BWAMEM.*_MEM|DRAGMAP_ALIGN)" {
        // Markduplicates Spark NEEDS name-sorted reads or runtime goes through the roof
        // However if it's skipped, reads need to be coordinate-sorted
        // Only name sort if Spark for Markduplicates + duplicate marking is not skipped
        // Currently SENTIEON_BWAMEM only supports coordinate sorting the reads.
        ext.args2        = { params.use_gatk_spark && params.use_gatk_spark.contains('markduplicates') && (!params.skip_tools || (params.skip_tools && !params.skip_tools.split(',').contains('markduplicates'))) ? '-n' : '' }
    }

    withName: "BWAMEM.*_MEM|SENTIEON_BWAMEM" {
        // Using -B 3 for tumor samples
        ext.args         = { meta.status == 1 ? "-K 100000000 -Y -B 3 -R ${meta.read_group}" : "-K 100000000 -Y -R ${meta.read_group}" }
    }

    withName: 'MERGE_BAM|INDEX_MERGE_BAM' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { 
				def label = meta.status == 1 ? 'tumor' : 'normal'
				"${params.outdir}/${meta.patient}/alignment/${label}/" 
				// "${params.outdir}/${meta.patient}/alignment/"
			},
            pattern: "*{bam,bai,duplicate*metrics*}"
            // Only save if (save_output_as_bam AND (no_markduplicates OR save_mapped ))
            // saveAs: { params.aligner == "fq2bam" ? "fq2bam/${it}" : null }
        ]
    }

    withName: 'MERGE_BAM' {
        ext.prefix = { "${meta.id}.sorted" }
    }


    withName: 'CRAM_TO_BAM_FINAL' {
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/${meta.patient}/mapped/" },
            pattern: "*{bam,bai}",
        ]
    }

    withName: '.*PICARD_COLLECTMULTIPLEMETRICS.*' {
        publishDir = [
            mode: params.publish_dir_mode,
            path: { 
				 def label = meta.status == 1 ? 'tumor' : 'normal'
            	return "${params.outdir}/${meta.patient}/picard_qc/${label}/"
				// "${params.outdir}/${meta.patient}/picard_qc/" 
			},
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*PICARD_COLLECTWGSMETRICS.*' {
        publishDir = [
            mode: params.publish_dir_mode,
            path: { 
				 def label = meta.status == 1 ? 'tumor' : 'normal'
            	return "${params.outdir}/${meta.patient}/picard_qc/${label}/"
				// "${params.outdir}/${meta.patient}/picard_qc/" 
			},
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

	withName: '.*PARABRICKS_BAMMETRICS.*' {
        publishDir = [
            mode: params.publish_dir_mode,
            path: { 
				 def label = meta.status == 1 ? 'tumor' : 'normal'
            	return "${params.outdir}/${meta.patient}/parabricks_qc/${label}/"
				// "${params.outdir}/${meta.patient}/picard_qc/" 
			},
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

	withName: '.*GPU_COLLECTMULTIPLEMETRICS.*' {
        publishDir = [
            mode: params.publish_dir_mode,
            path: { 
				 def label = meta.status == 1 ? 'tumor' : 'normal'
            	return "${params.outdir}/${meta.patient}/parabricks_multiple_metrics/${label}/"
				// "${params.outdir}/${meta.patient}/picard_qc/" 
			},
			pattern: "**",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: 'GATK4_ESTIMATELIBRARYCOMPLEXITY' {
        publishDir = [
            mode: params.publish_dir_mode,
            path: { 
				def label = meta.status == 1 ? 'tumor' : 'normal'
            	return "${params.outdir}/${meta.patient}/gatk_qc/${label}/"
				// "${params.outdir}/${meta.patient}/gatk_qc/" 
			},
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: 'SAMTOOLS_STATS' {
        ext.when         = { !(params.skip_tools && params.skip_tools.split(',').contains('samtools')) }
        ext.prefix       = { "${meta.id}.sorted.cram" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/${meta.patient}/samtools/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MOSDEPTH' {
        ext.args = { !params.wes ? "-n --fast-mode --by 500" : ""}
        ext.prefix       = {
            if (params.tools && params.tools.split(',').contains('sentieon_dedup')) {
                "${meta.id}.dedup"
            } else if (params.skip_tools && params.skip_tools.split(',').contains('markduplicates')) {
                "${meta.id}.sorted"
            } else {
                "${meta.id}.md"
            }
        }
        ext.when         = { !(params.skip_tools && params.skip_tools.split(',').contains('mosdepth')) }
        publishDir = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/${meta.patient}/mosdepth/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: 'GATK4_BASERECALIBRATOR|GATK4_BASERECALIBRATOR_SPARK' {
        ext.prefix       = { meta.num_intervals <= 1 ? "${meta.id}.recal" : "${meta.id}_${intervals.simpleName}.recal" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/${meta.patient}/" },
            pattern: "*table",
            saveAs: { meta.num_intervals > 1 ? null : "recal_table/${it}" }
        ]
    }

    withName: 'GATK4_APPLYBQSR|GATK4_APPLYBQSR_SPARK' {
        ext.prefix       = { meta.num_intervals <= 1 ? "${meta.id}.recal" : "${meta.id}_${intervals.simpleName}.recal" }
        publishDir       = [
            enabled: params.save_mapped,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/${meta.patient}/"},
            pattern: "*cram",
            saveAs: { meta.num_intervals > 1 ? null : "/recalibrated/${it}" }
        ]
    }

    withName: 'CRAM_TO_BAM_RECAL' {
        ext.prefix       = { "${meta.id}.recal" }

        publishDir       = [
            enabled: params.save_mapped,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/${meta.patient}/recalibrated/" },
            pattern: "*{recal.bam,recal.bam.bai}"
        ]
    }

    withName: 'GATK4_GATHERBQSRREPORTS' {
        ext.prefix       = {"${meta.id}.recal"}

        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/${meta.patient}/recal_table/" },
            pattern: "*table",
        ]
    }
    withName: 'CRAM_TO_BAM' {
        ext.args         = "-b"
    }

    withName: 'BAM_TO_CRAM' {
        // BAM provided for step Markduplicates either run through MD or Convert -> then saved as sorted.cram (convert) or md.cram (md directly)
        // BAM files provided for step prepare_recal are converted and run through BQSR -> then saved as md.cram
        // BAM files provided for step recal are converted and run through BQSR II -> then saved as md.cram
        ext.args         = "-C"
        ext.prefix       = { "${meta.id}.converted" }
        publishDir       = [
            enabled: !params.save_output_as_bam,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/${meta.patient}/mapped/" },
            pattern: "*{cram,crai}"
        ]
    }

    withName: '(BAM_MARKDUPLICATES|BAM_MARKDUPLICATES_SPARK):CRAM_QC_MOSDEPTH_SAMTOOLS:SAMTOOLS_STATS' {

        ext.prefix       = { "${meta.id}.md.cram" }
        publishDir       = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/${meta.patient}/samtools/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'BAM_TO_CRAM_MAPPING' {
        // Run only when mapping should be saved as CRAM or when no MD is done

            (
                (params.skip_tools && params.skip_tools.split(',').contains('markduplicates')) &&
                !(params.tools && params.tools.split(',').contains('sentieon_dedup'))
            )
        ext.prefix       = { "${meta.id}.sorted" }
        publishDir       = [
            // Never publish if BAM only should be published
            enabled: !params.save_output_as_bam,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/${meta.patient}/mapped/" },
            pattern: "*{cram,crai}"
        ]
    }

    // withName: 'GATK4_ESTIMATELIBRARYCOMPLEXITY' {
    //     ext.prefix       = { "${meta.id}.md.cram" }

    //     publishDir       = [
    //         mode: params.publish_dir_mode,
    //         path: { "${params.outdir}/${meta.patient}/markduplicates/" },
    //         pattern: "*metrics"
    //     ]
    // }

    withName: 'GATK4_MARKDUPLICATES' {
        ext.args         = '-REMOVE_DUPLICATES false -VALIDATION_STRINGENCY LENIENT'
        ext.prefix       = { "${meta.id}.md.cram" }

        publishDir       = [
            [
                enabled: !params.save_output_as_bam,
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/${meta.patient}/markduplicates/" },
                pattern: "*{cram,crai}"
            ],
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/Reports/" },
                pattern: "*metrics",
                saveAs: { !(params.skip_tools && params.skip_tools.split(',').contains('markduplicates_report')) ? "markduplicates/${meta.patient}/${it}" : null}
            ]
        ]
    }

    withName: 'GATK4_MARKDUPLICATES_SPARK' {
        ext.args         = '--remove-sequencing-duplicates false -VS LENIENT'
        ext.prefix       = { "${meta.id}.md.cram" }
        publishDir       = [
            enabled: !params.save_output_as_bam,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/${meta.patient}/markduplicates/" },
            pattern: "*{cram,crai}"
        ]
    }

    withName: 'INDEX_MARKDUPLICATES' {
        publishDir       = [
            enabled: !params.save_output_as_bam,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/${meta.patient}/markduplicates/" },
            pattern: "*{cram,crai}"
        ]
    }

    withName: 'CRAM_TO_BAM' {

        if (params.tools && params.tools.split(',').contains('sentieon_dedup')) {
            ext.prefix       = { "${meta.id}.dedup" }
            publishDir       = [
                enabled: params.save_output_as_bam,
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/${meta.patient}/sentieon_dedup/" },
                pattern: "*{dedup.bam,dedup.bam.bai}"
            ]
        } else {
            ext.prefix       = { "${meta.id}.md" }
            publishDir       = [
                enabled: params.save_output_as_bam,
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/${meta.patient}/markduplicates/" },
                pattern: "*{md.bam,md.bam.bai}"
            ]
        }
    }

    withName: '.*BAM_MSISENSORPRO:MSISENSORPRO_MSISOMATIC' {
        publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/${meta.patient}/msisensorpro/" },
                pattern: "*{_dis*,_germline*,_somatic*,_report*}"
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }
}
